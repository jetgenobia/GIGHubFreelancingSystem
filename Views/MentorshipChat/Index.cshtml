@{
    Layout = null;
    ViewData["Title"] = $"Chat with {Model.Partner.FirstName} {Model.Partner.LastName}";
}

@model Freelancing.Models.MentorshipChatViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/output.css" />
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
</head>
<body>
    <nav class="fixed top-0 z-50 w-full bg-white border-b border-gray-200">
        <div class="px-3 py-3 lg:px-5 lg:pl-3">
            <div class="flex items-center justify-between">
                <div class="flex items-center justify-start rtl:justify-end">
                    <button data-drawer-target="logo-sidebar" data-drawer-toggle="logo-sidebar" aria-controls="logo-sidebar" type="button" class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200">
                        <span class="sr-only">Open sidebar</span>
                        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path clip-rule="evenodd" fill-rule="evenodd" d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path>
                        </svg>
                    </button>
                    <a class="-m-1.5 p-1.5 ms-5" asp-area="" asp-controller="Home" asp-action="Index">
                        <span class="sr-only">Your Company</span>
                        <img class="h-16 w-auto" src="https://ik.imagekit.io/6txj3mofs/GIGHub%20(2).png?updatedAt=1749718355580" alt="">
                    </a>
                </div>
                <div class="flex items-center">
                    <div class="flex items-center me-5">
                        <div>
                            <button type="button" class="flex text-sm bg-gray-800 rounded-full focus:ring-4 focus:ring-gray-300" aria-expanded="false" data-dropdown-toggle="dropdown-user">
                                <span class="sr-only">Open user menu</span>
                                @if (!string.IsNullOrEmpty(@User.FindFirst("Photo")?.Value))
                                {
                                    <img class="w-8 h-8 rounded-full" src="@User.FindFirst("Photo")?.Value" alt="user photo">
                                }
                                else
                                {
                                    <img class="w-8 h-8 rounded-full" src="https://ik.imagekit.io/6txj3mofs/GIGHub%20(11).png?updatedAt=1750552804497" alt="user photo">
                                }
                            </button>
                        </div>
                        <div class="z-50 hidden my-4 text-base list-none bg-white divide-y divide-gray-100 rounded-sm shadow-sm" id="dropdown-user">
                            <div class="px-4 py-3" role="none">
                                <p class="text-sm text-gray-900" role="none">
                                    @User.FindFirst("FullName")?.Value
                                </p>
                                <p class="text-sm font-medium text-gray-900 truncate" role="none">
                                    @User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value
                                </p>
                            </div>
                            <ul class="py-1" role="none">
                                <li>
                                    <a asp-controller="Account" asp-action="LogOut" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Sign out</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <aside id="logo-sidebar" class="fixed top-0 left-0 z-40 w-64 h-screen pt-28 transition-transform -translate-x-full bg-white border-r border-gray-200 sm:translate-x-0" aria-label="Sidebar">
        <div class="ms-2 h-full px-3 pb-4 overflow-y-auto bg-white">
            <ul class="space-y-2 font-medium">
                <li>
                    <a class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group" asp-area="" asp-controller="Freelancer" asp-action="Dashboard">
                        <svg class="w-5 h-5 text-gray-500 transition duration-75 group-hover:text-gray-900" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 21">
                            <path d="M16.975 11H10V4.025a1 1 0 0 0-1.066-.998 8.5 8.5 0 1 0 9.039 9.039.999.999 0 0 0-1-1.066h.002Z" />
                            <path d="M12.5 0c-.157 0-.311.01-.565.027A1 1 0 0 0 11 1.02V10h8.975a1 1 0 0 0 1-.935c.013-.188.028-.374.028-.565A8.51 8.51 0 0 0 12.5 0Z" />
                        </svg>
                        <span class="ms-3">Dashboard</span>
                    </a>
                </li>
                <li>
                    <a class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group" asp-area="" asp-controller="Freelancer" asp-action="Feed">
                        <svg class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 group-hover:text-gray-900" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 18">
                            <path d="M6.143 0H1.857A1.857 1.857 0 0 0 0 1.857v4.286C0 7.169.831 8 1.857 8h4.286A1.857 1.857 0 0 0 8 6.143V1.857A1.857 1.857 0 0 0 6.143 0Zm10 0h-4.286A1.857 1.857 0 0 0 10 1.857v4.286C10 7.169 10.831 8 11.857 8h4.286A1.857 1.857 0 0 0 18 6.143V1.857A1.857 1.857 0 0 0 16.143 0Zm-10 10H1.857A1.857 1.857 0 0 0 0 11.857v4.286C0 17.169.831 18 1.857 18h4.286A1.857 1.857 0 0 0 8 16.143v-4.286A1.857 1.857 0 0 0 6.143 10Zm10 0h-4.286A1.857 1.857 0 0 0 10 11.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 18 16.143v-4.286A1.857 1.857 0 0 0 16.143 10Z" />
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Feed</span>
                    </a>
                </li>
                <li>
                    @if (!string.IsNullOrEmpty(@User.FindFirst("MentorshipId")?.Value))
                    {
                        <a class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group" asp-area="" asp-controller="PeerMentorship" asp-action="Dashboard" asp-route-id="@User.FindFirst("MentorshipId")?.Value">
                            <svg class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                <path d="M14 2a3.963 3.963 0 0 0-1.4.267 6.439 6.439 0 0 1-1.331 6.638A4 4 0 1 0 14 2Zm1 9h-1.264A6.957 6.957 0 0 1 15 15v2a2.97 2.97 0 0 1-.184 1H19a1 1 0 0 0 1-1v-1a5.006 5.006 0 0 0-5-5ZM6.5 9a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 10H5a5.006 5.006 0 0 0-5 5v2a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-2a5.006 5.006 0 0 0-5-5Z" />
                            </svg>
                            <span class="flex-1 ms-3 whitespace-nowrap">Peer Mentorship</span>
                        </a>
                    }
                    else
                    {
                        <a class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group" asp-area="" asp-controller="PeerMentorship" asp-action="Landing">
                            <svg class="shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                <path d="M14 2a3.963 3.963 0 0 0-1.4.267 6.439 6.439 0 0 1-1.331 6.638A4 4 0 1 0 14 2Zm1 9h-1.264A6.957 6.957 0 0 1 15 15v2a2.97 2.97 0 0 1-.184 1H19a1 1 0 0 0 1-1v-1a5.006 5.006 0 0 0-5-5ZM6.5 9a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 10H5a5.006 5.006 0 0 0-5 5v2a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-2a5.006 5.006 0 0 0-5-5Z" />
                            </svg>
                            <span class="flex-1 ms-3 whitespace-nowrap">Peer Mentorship</span>
                        </a>
                    }
                </li>
                <li>
                    <a class="flex items-center p-2 text-gray-900 rounded-lg hover:bg-gray-100 group" asp-area="" asp-controller="Freelancer" asp-action="EditAccount">
                        <svg class="shrink-0 w-6 h-6 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 22">
                            <path fill-rule="evenodd" d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z" clip-rule="evenodd" />
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Account</span>
                    </a>
                </li>
            </ul>
        </div>
    </aside>

    <div class="sm:ml-64">
        <div class="mt-20">
            <div class="block w-full chat-container">
                <!-- Chat Header -->
                <div class="chat-header mt-1">
                    <div class="flex items-center gap-3">
                        <img src="@(Model.Partner.Photo ?? "https://ik.imagekit.io/6txj3mofs/GIGHub%20(11).png?updatedAt=1750552804497")"
                             alt="@Model.Partner.FirstName"
                             class="w-12 h-12 rounded-full object-cover">
                        <div>
                            <h3 class="font-semibold text-lg">@Model.Partner.FirstName @Model.Partner.LastName</h3>
                            <!-- Simple security indicator -->
                            <div class="flex items-center gap-2 text-sm">
                                <span class="text-green-600 flex items-center gap-1">
                                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    Secure Chat
                                </span>
                                <a onclick="showSecurityInfo()"
                                   title="Security information">
                                    <svg class="w-[17px] h-[17px] text-blue-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                        <path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                        <div class="online-indicator" id="onlineIndicator" style="display: none;"></div>
                    </div>

                    <div class="flex items-center gap-2">
                        <button class="btn-video" onclick="startVideoCall()" title="Start Video Call">
                            <svg class="w-6 h-6 text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 11-6-2V9l6-2v10Z" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Security Information Modal -->
                <div id="securityInfoModal" class="fixed inset-0 hidden z-50" style="background: rgba(0,0,0,0.8);">
                    <div class="flex items-center justify-center min-h-screen px-4">
                        <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold">Chat Security</h3>
                                <button onclick="hideSecurityInfo()" class="text-gray-400 hover:text-gray-600">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>

                            <div class="space-y-4">
                                <div class="flex items-start gap-3">
                                    <div class="text-green-500 mt-1">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h4 class="font-medium text-gray-900">Encrypted Storage</h4>
                                        <p class="text-sm text-gray-600">Your messages are encrypted using AES-256 encryption before being stored in our database.</p>
                                    </div>
                                </div>

                                <div class="flex items-start gap-3">
                                    <div class="text-blue-500 mt-1">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h4 class="font-medium text-gray-900">Secure Transmission</h4>
                                        <p class="text-sm text-gray-600">All messages are sent over HTTPS and processed securely on our servers.</p>
                                    </div>
                                </div>

                                <div class="flex items-start gap-3">
                                    <div class="text-purple-500 mt-1">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M18 8a6 6 0 01-7.743 5.743L10 14l-1 1-1 1H6v2H2v-4l4.257-4.257A6 6 0 1118 8zm-6-4a1 1 0 100 2 2 2 0 012 2 1 1 0 102 0 4 4 0 00-4-4z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h4 class="font-medium text-gray-900">Access Control</h4>
                                        <p class="text-sm text-gray-600">Only authorized mentors and mentees can access their conversation messages.</p>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-6 bg-blue-50 border border-blue-200 rounded-md p-4">
                                <div class="flex">
                                    <div class="text-blue-400 mr-2">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h4 class="text-sm font-medium text-blue-800">Server-Side Security</h4>
                                        <p class="text-sm text-blue-700">Messages are automatically encrypted and decrypted by our secure servers to provide the best user experience.</p>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-6 flex justify-end">
                                <button onclick="hideSecurityInfo()"
                                        class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                                    Got it
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="chat-messages" id="messagesContainer">
                    @foreach (var message in Model.Messages)
                    {
                        <div class="message @(message.IsCurrentUser ? "own" : "")">
                            <div class="message-bubble">
                                @if (!message.IsCurrentUser)
                                {
                                    <div class="message-sender"></div>
                                }

                                @if (message.MessageType == "text")
                                {
                                    <div>@message.Message</div>
                                }
                                else if (message.MessageType == "file")
                                {
                                    <div class="file-message">
                                        <div class="file-icon">
                                            <svg class="w-[24px] h-[24px] text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                                <path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                        <div>
                                            <a href="@message.FileUrl" download class="hover: underline">
                                                @message.Message
                                            </a>
                                            <div class="text-xs opacity-75">
                                                @(message.FileSize.HasValue ? (message.FileSize.Value / 1024.0 / 1024.0).ToString("F2") + " MB" : "")
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (message.MessageType == "image")
                                {
                                    <div class="image-message">
                                        <img src="@message.FileUrl" alt="@message.Message"
                                             class="max-w rounded-lg cursor-pointer"
                                             onclick="openImageModal('@message.FileUrl')"
                                             style="max-height: 300px; object-fit: cover;">
                                    </div>
                                }

                                <div class="message-time" data-timestamp="@message.SentAt.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")">
                                    @message.SentAt.ToString("HH:mm")
                                    @if (message.IsCurrentUser)
                                    {
                                        <i class="fas fa-check @(message.IsRead ? "text-blue-400" : "")"
                                           title="@(message.IsRead ? "Read" : "Sent")"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Typing Indicator -->
                <div class="typing-indicator" id="typingIndicator">
                    <span id="typingUser"></span> is typing
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>

                <!-- Chat Input -->
                <div class="chat-input">
                    <div class="input-container">
                        <input type="file" id="fileInput" style="display: none;"
                               accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.mp4,.mov,.avi"
                               onchange="handleFileUpload()">

                        <button class="btn-file" onclick="document.getElementById('fileInput').click()" title="Attach File">
                            <svg class="w-[24px] h-[24px] text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8v8a5 5 0 1 0 10 0V6.5a3.5 3.5 0 1 0-7 0V15a2 2 0 0 0 4 0V8" />
                            </svg>
                        </button>

                        <input type="text"
                               class="chat-input-field"
                               id="messageInput"
                               placeholder="Type your message..."
                               onkeypress="handleKeyPress(event)"
                               oninput="handleTyping()">

                        <button class="btn-send" onclick="sendMessage()" title="Send Message">
                            <svg class="w-[24px] h-[24px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                <path fill-rule="evenodd" d="M12 2a1 1 0 0 1 .932.638l7 18a1 1 0 0 1-1.326 1.281L13 19.517V13a1 1 0 1 0-2 0v6.517l-5.606 2.402a1 1 0 0 1-1.326-1.281l7-18A1 1 0 0 1 12 2Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Video Call Notification -->
            <div class="video-call-notification" id="videoCallNotification">
                <div class="flex items-center gap-3 mb-3">
                    <i class="fas fa-video text-2xl text-blue-600"></i>
                    <div>
                        <div class="font-semibold" id="callerName"></div>
                        <div class="text-sm text-gray-600">Incoming video call</div>
                    </div>
                </div>
                <div class="flex gap-2">
                    <button class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                            onclick="acceptVideoCall()">
                        <i class="fas fa-phone"></i> Accept
                    </button>
                    <button class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600"
                            onclick="declineVideoCall()">
                        <i class="fas fa-phone-slash"></i> Decline
                    </button>
                </div>
            </div>

            <!-- Call Waiting Notification -->
            <div class="call-waiting-notification" id="callWaitingNotification">
                <div class="flex items-center gap-3 mb-3">
                    <i class="fas fa-phone text-2xl text-orange-500"></i>
                    <div>
                        <div class="font-semibold">Calling...</div>
                        <div class="text-sm text-gray-600">Waiting for response</div>
                    </div>
                </div>
                <div class="flex gap-2">
                    <button class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600"
                            onclick="cancelVideoCall()">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>

            <!-- Image Modal -->
            <div class="modal" id="imageModal">
                <div class="modal-content">
                    <span class="close" onclick="closeImageModal()">&times;</span>
                    <img id="modalImage" style="max-width: 100%; max-height: 80vh;">
                </div>
            </div>
        </div>
    </div>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.js"></script>
    <script>
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/mentorshipChatHub")
            .build();

        const matchId = '@Model.MatchId';
        const currentUserId = '@Model.CurrentUserId';
        

        let typingTimer;
        let isTyping = false;
        let currentCallerId = null;
        let isConnectionReady = false;

        // Timezone handling - get user's timezone offset
        const userTimezoneOffset = new Date().getTimezoneOffset();

        // Function to format time consistently
        function formatTime(dateString) {
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) {
                    return 'Now';
                }
                return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            } catch (e) {
                console.error('Date formatting error:', e);
                return 'Now';
            }
        }

        // Start connection
        connection.start().then(() => {
            console.log('SignalR Connected');
            isConnectionReady = true;
            connection.invoke('JoinMentorshipRoom', matchId);

            // Fix existing message times on page load
            fixExistingMessageTimes();
        }).catch(err => {
            console.error('SignalR Connection Error: ', err);
            isConnectionReady = false;
        });

        // Fix existing message times to use consistent timezone
        function fixExistingMessageTimes() {
            const messageTimeElements = document.querySelectorAll('.message-time[data-timestamp]');
            messageTimeElements.forEach(element => {
                const timestamp = element.getAttribute('data-timestamp');
                if (timestamp) {
                    const timeText = formatTime(timestamp);
                    // Find and update only the first text node
                    const firstTextNode = Array.from(element.childNodes).find(node => node.nodeType === Node.TEXT_NODE);
                    if (firstTextNode) {
                        firstTextNode.textContent = timeText + ' ';
                    }
                }
            });
        }

        // Connection events
        connection.on('Connected', (connectionId) => {
            console.log('Connected with ID:', connectionId);
            isConnectionReady = true;
        });

        // Handle connection state changes
        connection.onclose(() => {
            console.log('SignalR connection closed');
            isConnectionReady = false;
        });

        connection.onreconnecting(() => {
            console.log('SignalR reconnecting...');
            isConnectionReady = false;
        });

        connection.onreconnected(() => {
            console.log('SignalR reconnected');
            isConnectionReady = true;
        });

        connection.on('JoinedRoom', (roomName) => {
            console.log('Joined room:', roomName);
        });

        connection.on('UserJoined', (userName) => {
            document.getElementById('onlineIndicator').style.display = 'block';
        });

        // Error handling
        connection.on('Error', (error) => {
            console.error('SignalR Error:', error);
            if (error.includes('Access denied') || error.includes('mentorship not active')) {
                alert('Access denied. You may not have permission to access this mentorship or it may not be active.');
            } else {
                alert('Connection error: ' + error);
            }
        });

        // Message events
        connection.on('ReceiveMessage', (message) => {
            addMessageToChat(message);
            scrollToBottom();
        });

        connection.on('ReceiveFile', (fileMessage) => {
            addFileMessageToChat(fileMessage);
            scrollToBottom();
        });

        connection.on('MessagesMarkedAsRead', (data) => {
            markMessagesAsRead(data.MessageIds);
        });

        // Typing events
        connection.on('TypingIndicator', (data) => {
            if (data.IsTyping) {
                showTypingIndicator(data.UserName);
            } else {
                hideTypingIndicator();
            }
        });

        // Video call events
        connection.on('IncomingVideoCall', (data) => {
            console.log('Incoming video call:', data);
            console.log('Data type:', typeof data);
            console.log('Data properties:', Object.keys(data));
            console.log('CallerId:', data.callerId);
            console.log('CallerName:', data.callerName);
            
            // Since we're already in the chat, we don't need to show the global notification
            // The global notification system will handle this for users not in the chat
            // We can still show a local notification if needed
            console.log('MentorshipMatchId:', data.mentorshipMatchId);
            
            currentCallerId = data.callerId;
            document.getElementById('callerName').textContent = data.callerName;
            document.getElementById('videoCallNotification').style.display = 'block';
        });

        connection.on('VideoCallAccepted', (data) => {
            console.log('Video call accepted:', data);
            console.log('Current matchId:', matchId);
            console.log('Data mentorshipMatchId:', data.mentorshipMatchId);
            
            // Use the matchId from the data if available, otherwise use the current matchId
            const targetMatchId = data.mentorshipMatchId || matchId;
            const videoCallUrl = `/MentorshipChat/VideoCall/${targetMatchId}`;
            
            // Add a small delay to ensure the server-side processing is complete
            setTimeout(() => {
                window.open(videoCallUrl, '_blank', 'width=1200,height=800');
            }, 500);
        });

        connection.on('VideoCallDeclined', (data) => {
            console.log('Video call declined:', data);
            alert('Call was declined');
        });

        // Call waiting events
        connection.on('CallRequested', (data) => {
            console.log('Call requested:', data);
            // Show the waiting notification
            document.getElementById('callWaitingNotification').style.display = 'block';
        });

        connection.on('CallAccepted', (data) => {
            console.log('Call accepted:', data);
            // Hide the waiting notification
            document.getElementById('callWaitingNotification').style.display = 'none';
            
            // The VideoCallAccepted event will handle opening the video call window
        });

        connection.on('CallDeclined', (data) => {
            console.log('Call declined:', data);
            // Hide the waiting notification
            document.getElementById('callWaitingNotification').style.display = 'none';
            alert('Call was declined');
        });

        // Functions
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (message) {
                console.log('Sending message:', message, 'to match:', matchId);
                connection.invoke('SendMessage', matchId, message, 'text')
                    .then(() => {
                        console.log('Message sent successfully');
                        input.value = '';
                        handleTyping(); // Stop typing indicator
                    })
                    .catch(err => {
                        console.error('Error sending message:', err);
                        alert('Failed to send message: ' + err);
                    });
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function handleTyping() {
            if (!isTyping) {
                isTyping = true;
                connection.invoke('SendTypingIndicator', matchId, true);
            }

            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                isTyping = false;
                connection.invoke('SendTypingIndicator', matchId, false);
            }, 1000);
        }

        function handleFileUpload() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (!file) {
                return;
            }

            console.log('Selected file:', file.name, 'Size:', file.size, 'Type:', file.type);

            // Validate file size (10MB limit)
            const maxSize = 10 * 1024 * 1024;
            if (file.size > maxSize) {
                alert('File size exceeds 10MB limit');
                fileInput.value = '';
                return;
            }

            // Validate file type
            const allowedExtensions = ['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi'];
            const fileExtension = file.name.split('.').pop().toLowerCase();

            if (!allowedExtensions.includes(fileExtension)) {
                alert('File type not allowed. Allowed types: ' + allowedExtensions.join(', '));
                fileInput.value = '';
                return;
            }

            const formData = new FormData();
            formData.append('file', file);
            formData.append('matchId', matchId);

            // Show upload progress
            const loadingMessage = addSystemMessage(`Uploading ${file.name}...`);

            $.ajax({
                url: '/MentorshipChat/UploadFile',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                timeout: 60000, // 60 seconds timeout
                xhr: function() {
                    const xhr = new window.XMLHttpRequest();
                    xhr.upload.addEventListener('progress', function(evt) {
                        if (evt.lengthComputable) {
                            const percentComplete = Math.round((evt.loaded / evt.total) * 100);
                            const messageElement = loadingMessage.querySelector('.message-bubble div');
                            if (messageElement) {
                                messageElement.textContent = `Uploading ${file.name}... ${percentComplete}%`;
                            }
                        }
                    }, false);
                    return xhr;
                },
                success: function(response) {
                    console.log('Upload response:', response);
                    loadingMessage.remove();

                    if (response.success) {
                        console.log('Sending file via SignalR:', {
                            matchId,
                            fileName: response.fileName,
                            fileUrl: response.fileUrl,
                            fileSize: response.fileSize,
                            fileType: response.fileType
                        });

                        // Send file via SignalR
                        connection.invoke('SendFile', matchId, response.fileName,
                            response.fileUrl, response.fileSize, response.fileType)
                            .then(() => {
                                console.log('File message sent via SignalR successfully');
                            })
                            .catch(err => {
                                console.error('SignalR SendFile error:', err);
                                alert('Failed to send file notification: ' + err.message || err.toString());

                                // Add error message to chat
                                addSystemMessage(`Failed to send file: ${err.message || 'Unknown error'}`);
                            });
                    } else {
                        console.error('Upload failed:', response.message);
                        alert('Upload failed: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Upload AJAX error:', { xhr, status, error, responseText: xhr.responseText });
                    loadingMessage.remove();

                    let errorMessage = 'Upload failed';
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response && response.message) {
                            errorMessage += ': ' + response.message;
                        }
                    } catch (e) {
                        if (error) {
                            errorMessage += ': ' + error;
                        } else if (xhr.responseText) {
                            errorMessage += ': ' + xhr.responseText;
                        }
                    }

                    alert(errorMessage);
                }
            });

            fileInput.value = '';
        }

        function startVideoCall() {
            // Check if connection is established
            if (!isConnectionReady) {
                console.log('Connection not ready, waiting for connection...');
                alert('Connection not ready. Please wait a moment and try again.');
                return;
            }

            console.log('Starting video call with matchId:', matchId);
            console.log('matchId type:', typeof matchId, 'value:', matchId);
            console.log('Connection state:', connection.state);
            
            connection.invoke('StartVideoCall', matchId)
                .then(() => {
                    console.log('Video call started successfully');
                })
                .catch(error => {
                    console.error('Error starting video call:', error);
                    alert('Failed to start video call. Please try again.');
                });
        }

        function acceptVideoCall() {
            // Check if connection is established
            if (!isConnectionReady) {
                console.log('Connection not ready, waiting for connection...');
                alert('Connection not ready. Please wait a moment and try again.');
                return;
            }

            console.log('Accepting video call with matchId:', matchId, 'callerId:', currentCallerId);
            console.log('matchId type:', typeof matchId, 'value:', matchId);
            console.log('currentCallerId type:', typeof currentCallerId, 'value:', currentCallerId);
            
            connection.invoke('AcceptVideoCall', matchId, currentCallerId)
                .then(() => {
                    document.getElementById('videoCallNotification').style.display = 'none';
                    // Don't open the video call window here - let the VideoCallAccepted event handle it
                })
                .catch(error => {
                    console.error('Error accepting video call:', error);
                    alert('Failed to accept video call. Please try again.');
                    document.getElementById('videoCallNotification').style.display = 'none';
                });
        }

        function declineVideoCall() {
            // Check if connection is established
            if (!isConnectionReady) {
                console.log('Connection not ready, waiting for connection...');
                alert('Connection not ready. Please wait a moment and try again.');
                return;
            }

            console.log('Declining video call with matchId:', matchId, 'callerId:', currentCallerId);
            connection.invoke('DeclineVideoCall', matchId, currentCallerId)
                .then(() => {
                    console.log('Video call declined successfully');
                    document.getElementById('videoCallNotification').style.display = 'none';
                })
                .catch(error => {
                    console.error('Error declining video call:', error);
                    alert('Failed to decline video call. Please try again.');
                    document.getElementById('videoCallNotification').style.display = 'none';
                });
        }

        function cancelVideoCall() {
            // Check if connection is established
            if (!isConnectionReady) {
                console.log('Connection not ready, waiting for connection...');
                alert('Connection not ready. Please wait a moment and try again.');
                return;
            }

            console.log('Cancelling video call with matchId:', matchId);
            
            // Hide the waiting notification
            document.getElementById('callWaitingNotification').style.display = 'none';
            
            // Note: We don't need to send a specific cancel event to the server
            // The waiting notification will just disappear, and if the other person
            // tries to accept/decline later, it won't affect anything
        }

        function showSecurityInfo() {
            document.getElementById('securityInfoModal').classList.remove('hidden');
        }

        function hideSecurityInfo() {
            document.getElementById('securityInfoModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('securityInfoModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideSecurityInfo();
            }
        });

        function addMessageToChat(data) {
            console.log('Processing message data:', data);

            const messagesContainer = document.getElementById('messagesContainer');
            const messageDiv = document.createElement('div');

            // Extract properties with multiple fallback options
            const senderId = data.SenderId || data.senderId || data.userId || '';
            const senderName = data.SenderName || data.senderName || data.name || 'Unknown User';
            const messageText = data.Message || data.message || data.text || '';
            const sentAt = data.SentAt || data.sentAt || data.timestamp || new Date().toISOString();
            const messageType = data.MessageType || data.messageType || 'text';

            console.log('Extracted values:', { senderId, senderName, messageText, sentAt, currentUserId });

            const isOwnMessage = senderId.toString() === currentUserId.toString();
            messageDiv.className = `message ${isOwnMessage ? 'own' : ''}`;

            // Use consistent time formatting
            const timeDisplay = formatTime(sentAt);

            messageDiv.innerHTML = `
                <div class="message-bubble">
                    <div>${messageText}</div>
                    <div class="message-time" data-timestamp="${sentAt}">
                        ${timeDisplay}
                        ${isOwnMessage ? '<i class="fas fa-check" title="Sent"></i>' : ''}
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageDiv);
        }

        function addFileMessageToChat(data) {
            console.log('Processing file data:', data);

            const messagesContainer = document.getElementById('messagesContainer');
            if (!messagesContainer) {
                console.error('Messages container not found');
                return;
            }

            const messageDiv = document.createElement('div');

            // Extract properties with multiple fallback options
            const senderId = data.SenderId || data.senderId || data.userId || '';
            const senderName = data.SenderName || data.senderName || data.name || 'Unknown User';
            const fileName = data.FileName || data.fileName || data.Message || data.message || 'Unknown File';
            const fileUrl = data.FileUrl || data.fileUrl || data.url || '';
            const fileSize = data.FileSize || data.fileSize || data.size || 0;
            const fileType = data.FileType || data.fileType || data.type || '';
            const messageType = data.MessageType || data.messageType || 'file';
            const sentAt = data.SentAt || data.sentAt || data.timestamp || new Date().toISOString();

            console.log('Extracted file values:', { senderId, senderName, fileName, fileUrl, fileSize, fileType, messageType, sentAt });

            const isOwnMessage = senderId.toString() === currentUserId.toString();
            messageDiv.className = `message ${isOwnMessage ? 'own' : ''}`;

            // Use consistent time formatting
            const timeDisplay = formatTime(sentAt);

            // Format file size only for non-image files
            const fileSizeFormatted = fileSize > 0 ? (fileSize / 1024 / 1024).toFixed(2) + ' MB' : '';

            // Determine if it's an image based on message type or file type
            const isImage = messageType === 'image' ||
                           (fileType && fileType.startsWith('image/')) ||
                           fileName.toLowerCase().match(/\.(jpg|jpeg|png|gif|webp)$/);

            const isVideo = messageType === 'video' ||
                           (fileType && fileType.startsWith('video/')) ||
                           fileName.toLowerCase().match(/\.(mp4|mov|avi|wmv)$/);

            const linkClass = isOwnMessage ? 'text-white hover:underline' : 'text-blue-600 hover:underline';

            let contentHtml = '';

            if (isImage) {
                // For images, show only the image without filename or size
                // Use consistent sizing with server-rendered images
                contentHtml = `
                    <div class="image-message">
                        <img src="${fileUrl}" alt="${fileName}"
                             class="max-w rounded-lg cursor-pointer"
                             onclick="openImageModal('${fileUrl}')"
                             style="max-height: 300px; object-fit: cover;">
                    </div>
                `;
            } else if (isVideo) {
                contentHtml = `
                    <div class="video-message">
                        <video class="max-w-xs rounded-lg" controls style="max-height: 200px;">
                            <source src="${fileUrl}" type="${fileType}">
                            Your browser does not support the video tag.
                        </video>
                        <div class="text-xs opacity-75 mt-1">${fileName}</div>
                        ${fileSizeFormatted ? `<div class="text-xs opacity-75">${fileSizeFormatted}</div>` : ''}
                    </div>
                `;
            } else {
                contentHtml = `
                    <div class="file-message">
                        <div class="file-icon">
                            <svg class="w-[24px] h-[24px] text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                <path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div>
                            <a href="${fileUrl}" download="${fileName}" class="${linkClass}">
                                ${fileName}
                            </a>
                            ${fileSizeFormatted ? `<div class="text-xs opacity-75">${fileSizeFormatted}</div>` : ''}
                        </div>
                    </div>
                `;
            }

            messageDiv.innerHTML = `
                <div class="message-bubble">
                    ${contentHtml}
                    <div class="message-time" data-timestamp="${sentAt}">
                        ${timeDisplay}
                        ${isOwnMessage ? '<i class="fas fa-check" title="Sent"></i>' : ''}
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        function addSystemMessage(message) {
            const messagesContainer = document.getElementById('messagesContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message system';
            messageDiv.innerHTML = `
                <div class="message-bubble" style="background: rgba(156, 163, 175, 0.3); color: #6b7280; text-align: center;">
                    <div style="font-style: italic;">${message}</div>
                </div>
            `;
            messagesContainer.appendChild(messageDiv);
            scrollToBottom();
            return messageDiv;
        }

        function showTypingIndicator(userName) {
            const indicator = document.getElementById('typingIndicator');
            document.getElementById('typingUser').textContent = userName;
            indicator.style.display = 'flex';
            scrollToBottom();
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        function scrollToBottom() {
            const container = document.getElementById('messagesContainer');
            if (container) {
                container.scrollTop = container.scrollHeight;
            }
        }

        function openImageModal(src) {
            document.getElementById('modalImage').src = src;
            document.getElementById('imageModal').style.display = 'block';
        }

        function closeImageModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        function markMessagesAsRead(messageIds) {
            messageIds.forEach(id => {
                // Update UI to show messages as read
                const messageElements = document.querySelectorAll('.message.own .fas.fa-check');
                messageElements.forEach(el => {
                    el.classList.add('text-blue-400');
                    el.title = 'Read';
                });
            });
        }

        // Mark messages as read when page loads
        connection.invoke('MarkMessagesAsRead', matchId);

        // Auto-scroll to bottom on page load
        window.onload = () => {
            scrollToBottom();
        };
    </script>
</body>
</html>