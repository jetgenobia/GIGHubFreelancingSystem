@model Freelancing.Models.ContractViewModel
@{
    Layout = User.IsInRole("Client") ? "_LayoutClient" : "_LayoutFreelancer";
    ViewData["Title"] = "Contract Details - " + Model.ProjectName;
    var userIsClient = User.IsInRole("Client");
    var userIsFreelancer = User.IsInRole("Freelancer");
}

<div class="p-4 sm:ml-64">
    <div class="p-4 mt-20">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-4">
                    <a href="@(userIsClient ? Url.Action("Details", "ManageProjectClient", new { id = Model.ProjectId }) : Url.Action("Details", "ManageProjectFreelancer", new { id = Model.ProjectId }))" class="text-blue-600 hover:text-blue-800">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                    </a>
                    <h1 class="text-3xl font-bold text-gray-900">Contract Details</h1>
                </div>
                @{
                    var statusColor = Model.Status switch
                    {
                        "Draft" => "bg-yellow-100 text-yellow-800",
                        "Awaiting Freelancer" => "bg-orange-100 text-orange-800",
                        "Awaiting Client" => "bg-orange-100 text-orange-800",
                        "Active" => "bg-green-100 text-green-800",
                        "Completed" => "bg-blue-100 text-blue-800",
                        _ => "bg-gray-100 text-gray-800"
                    };
                }
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @statusColor">
                    @Model.Status
                </span>
            </div>

            <!-- Contract Summary -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-xl font-semibold text-gray-900">@Model.ContractTitle</h2>
                    <div class="flex space-x-2">
                        @if (Model.HasSignedDocument)
                        {
                            <a href="@Url.Action("Download", new { id = Model.Id })" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Download PDF
                            </a>
                        }
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Project</label>
                        <p class="text-gray-900">@Model.ProjectName</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Agreed Amount</label>
                        <p class="text-gray-900 font-semibold text-green-600">â‚±@Model.AgreedAmount</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Delivery Timeline</label>
                                                 <p class="text-gray-900">
                             @if (Model.Timeline != null)
                             {
                                 @Model.Timeline.StartDate.ToString("MMM dd, yyyy") <span>-</span> @Model.Timeline.Deadline.ToString("MMM dd, yyyy")
                             }
                             else
                             {
                                 @Model.DeliveryTimeline
                             }
                         </p>
                    </div>
                </div>
            </div>

            <!-- Signature Status -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Signature Status</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <!-- Client Signature -->
                    <div class="flex items-center space-x-4 p-4 @(Model.ClientHasSigned ? "bg-green-50" : "bg-yellow-50") rounded-lg">
                        <div class="flex-shrink-0">
                            @if (Model.ClientHasSigned)
                            {
                                <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            }
                        </div>
                        <div class="flex-1">
                            <h3 class="font-medium text-gray-900">Client: @Model.ClientName</h3>
                            @if (Model.ClientHasSigned)
                            {
                                <p class="text-sm text-green-600">Signed on @Model.ClientSignedAt?.ToString("MMMM dd, yyyy 'at' HH:mm")</p>
                            }
                            else
                            {
                                <p class="text-sm text-yellow-600">Signature pending</p>
                            }
                        </div>
                    </div>

                    <!-- Freelancer Signature -->
                    <div class="flex items-center space-x-4 p-4 @(Model.FreelancerHasSigned ? "bg-green-50" : "bg-yellow-50") rounded-lg">
                        <div class="flex-shrink-0">
                            @if (Model.FreelancerHasSigned)
                            {
                                <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            }
                        </div>
                        <div class="flex-1">
                            <h3 class="font-medium text-gray-900">Freelancer: @Model.FreelancerName</h3>
                            @if (Model.FreelancerHasSigned)
                            {
                                <p class="text-sm text-green-600">Signed on @Model.FreelancerSignedAt?.ToString("MMMM dd, yyyy 'at' HH:mm")</p>
                            }
                            else
                            {
                                <p class="text-sm text-yellow-600">Signature pending</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Sign Button -->
                @{
                    var currentUserId = Guid.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value!);
                    var isCurrentUserClient = Model.ClientId == currentUserId;
                    var isCurrentUserFreelancer = Model.FreelancerId == currentUserId;
                    var canCurrentUserSign = (isCurrentUserClient && !Model.ClientHasSigned) || (isCurrentUserFreelancer && !Model.FreelancerHasSigned);
                }

                @if (canCurrentUserSign && (Model.Status == "Draft" || Model.Status == "AwaitingFreelancer" || Model.Status == "AwaitingClient"))
                {
                    <div class="mt-6 text-center">
                        <a href="@Url.Action("Sign", new { id = Model.Id })" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                            Sign Contract
                        </a>
                    </div>
                }
            </div>

            <!-- Contract Content -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Contract Terms</h2>
                <div class="prose max-w-none">
                    @Html.Raw(Model.ContractContent)
                </div>
            </div>

            <!-- Contract Terms Summary -->
            @if (Model.PaymentTerms != null || Model.DeliverableRequirements != null)
            {
                <div class="bg-white rounded-lg shadow p-6 mb-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Terms Summary</h2>
                    
                    @if (Model.PaymentTerms != null)
                    {
                        <div class="mb-4">
                            <h3 class="font-medium text-gray-900 mb-2">Payment Terms</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="bg-gray-50 p-3 rounded">
                                    <span class="text-sm text-gray-600">Upfront Payment:</span>
                                    <span class="font-medium">@Model.PaymentTerms.UpfrontPercentage%</span>
                                </div>
                                <div class="bg-gray-50 p-3 rounded">
                                    <span class="text-sm text-gray-600">Final Payment:</span>
                                    <span class="font-medium">@Model.PaymentTerms.FinalPercentage%</span>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (Model.DeliverableRequirements != null && Model.DeliverableRequirements.Any())
                    {
                        <div class="mb-4">
                            <h3 class="font-medium text-gray-900 mb-2">Deliverable Requirements</h3>
                            <ul class="list-disc list-inside space-y-1">
                                @foreach (var requirement in Model.DeliverableRequirements)
                                {
                                    <li class="text-gray-700">@requirement</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }

            <!-- Audit Log -->
            @if (Model.AuditLogs.Any())
            {
                <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Activity Log</h2>
                    <div class="space-y-3">
                        @foreach (var log in Model.AuditLogs.Take(10))
                        {
                            <div class="flex items-start space-x-3 p-3 bg-gray-50 rounded">
                                <div class="flex-shrink-0">
                                    <div class="w-2 h-2 bg-blue-600 rounded-full mt-2"></div>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm text-gray-900">
                                        <span class="font-medium">@log.UserName</span>
                                        @log.Action.ToLower() the contract
                                    </p>
                                    @if (!string.IsNullOrEmpty(log.Details))
                                    {
                                        <p class="text-sm text-gray-600">@log.Details</p>
                                    }
                                    <p class="text-xs text-gray-500">@log.Timestamp.ToString("MMM dd, yyyy 'at' HH:mm")</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

