@{
	Layout = "_LayoutFreelancer";
	ViewData["Title"] = "Project Details";
}

@model Freelancing.Models.Entities.Project

<div class="p-4 sm:ml-64">
	<div class="p-4 mt-20">
		<div class="mt-4">
			<div class="block w-full p-6">
				<h2 class="mb-4 text-3xl font-bold text-gray-900">@Model.ProjectName</h2>
				<div class="flex items-center mb-2">
					<h5 class="text-xl font-bold tracking-tight text-gray-900 mr-2">Category:</h5>
					<span class="ms-2 text-xl font-light tracking-tight text-gray-900">@Model.Category</span>
				</div>
				<div class="flex items-center mb-2">
					<h5 class="text-xl font-bold tracking-tight text-gray-900 mr-2">Budget:</h5>
					<span class="ms-2 text-xl font-light tracking-tight text-gray-900">₱@Model.Budget</span>
				</div>
				<h5 class="mb-5 text-xl font-light tracking-tight text-gray-900">@Model.ProjectDescription</h5>
				<div class="flex items-center mb-2">
					<h5 class="text-xl font-bold tracking-tight text-gray-900 mr-2">Required Skills:</h5>
					@if (Model.ProjectSkills != null && Model.ProjectSkills.Any())
					{
						<div class="flex flex-wrap gap-2">
							@foreach (var projectSkill in Model.ProjectSkills)
							{
								<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
									@projectSkill.UserSkill.Name
								</span>
							}
						</div>
					}
				</div>
				@if (!string.IsNullOrEmpty(Model.ImagePaths))
				{
					<div class="mt-6">
						<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
							@{
								var imagePaths = System.Text.Json.JsonSerializer.Deserialize<List<string>>(Model.ImagePaths);
								foreach (var imagePath in imagePaths)
								{
									<div class="relative group">
										<img src="@imagePath" alt="Project Image" class="w-full h-full object-cover rounded-lg shadow-md cursor-pointer hover:opacity-90 transition-opacity" onclick="openImageModal('@imagePath')">
									</div>
								}
							}
						</div>
					</div>
				}
				<div class="flex items-center mt-3">
					<h5 class="text-info font-medium italic tracking-tight text-gray-900 mr-2">Posted:</h5>
					<span class="text-info font-light italic tracking-tight text-gray-900">@Model.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
				</div>
			</div>
		</div>
		<div class="mt-4">
			<div class="block w-full p-6">
				<h2 class="mb-4 text-3xl font-bold text-gray-900">Biddings</h2>
				@if (!string.IsNullOrEmpty(TempData["Message"] as string))
				{
					<div class="mt-2 flex items-center p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50" role="alert">
						<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
							<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
						</svg>
						<span class="sr-only">Info</span>
						<div>
							@TempData["Message"]
						</div>
					</div>
				}
				@foreach (var bid in Model.Biddings)
				{
					<div class="mb-5 p-6 border border-gray-200 rounded-lg shadow-sm">
						<div class="flex items-center mb-3">
							@if (!string.IsNullOrEmpty(bid.User.Photo))
							{
								<img class="w-8 h-8 rounded-full" src="@bid.User.Photo" alt="user photo">
							}
							else
							{
								<img class="w-8 h-8 rounded-full" src="https://ik.imagekit.io/6txj3mofs/GIGHub%20(11).png?updatedAt=1750552804497" alt="user photo">
							}
							<h5 class="ms-2 text-xl font-bold tracking-tight text-gray-900">@bid.User?.FirstName @bid.User?.LastName</h5>
						</div>
						<hr class="border-gray-300 mb-4">
						<div class="flex items-center mb-2">
							<h5 class="text-md font-bold tracking-tight text-gray-900 mr-2">Budget Proposal:</h5>
							<span class="ms-2 text-md font-light tracking-tight text-gray-900">₱@bid.Budget</span>
						</div>
						<div class="flex items-center mb-2">
							<h5 class="text-md font-bold tracking-tight text-gray-900 mr-2">Delivery Time Proposal:</h5>
							<span class="ms-2 text-md font-light tracking-tight text-gray-900">@bid.Delivery</span>
						</div>
						<p class="text-md font-light tracking-tight text-gray-900 mr-2">@bid.Proposal</p>
						
						@if (!string.IsNullOrEmpty(bid.PreviousWorksPaths))
						{
							<div class="mt-4">
								<h6 class="text-sm font-semibold text-gray-700 mb-2">Previous Works:</h6>
								<div class="flex flex-wrap gap-2">
									@try
									{
										var filePaths = System.Text.Json.JsonSerializer.Deserialize<List<string>>(bid.PreviousWorksPaths);
										foreach (var filePath in filePaths)
										{
											var fileName = System.IO.Path.GetFileName(filePath);
											var fileExtension = System.IO.Path.GetExtension(filePath).ToLowerInvariant();
											var isImage = new[] { ".jpg", ".jpeg", ".png", ".gif", ".svg" }.Contains(fileExtension);
											
											<div class="flex items-center space-x-2 p-2 bg-gray-50 rounded border border-gray-300">
												@if (isImage)
												{
													<img src="@filePath" alt="@fileName" class="w-8 h-8 object-cover rounded cursor-pointer" onclick="openImageModal('@filePath')" title="Click to view">
												}
												else
												{
													<div class="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
														<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
														</svg>
													</div>
												}
												<a href="@filePath" target="_blank" class="text-sm text-blue-600 hover:text-blue-800 truncate max-w-32" title="@fileName">
													@fileName
												</a>
											</div>
										}
									}
									catch
									{
										<span class="text-sm text-gray-500">Error loading files</span>
									}
								</div>
							</div>
						}
						
						@if (!string.IsNullOrEmpty(bid.RepositoryLinks))
						{
							<div class="mt-4">
								<h6 class="text-sm font-semibold text-gray-700 mb-2">Repository/Drive Links:</h6>
								<div class="flex flex-wrap gap-2">
									@try
									{
										var links = System.Text.Json.JsonSerializer.Deserialize<List<string>>(bid.RepositoryLinks);
										foreach (var link in links)
										{
											<div class="flex items-center space-x-2 p-2 bg-blue-50 rounded border border-gray-300">
												<div class="w-6 h-6 bg-blue-100 rounded flex items-center justify-center">
													<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
													</svg>
												</div>
												<a href="@link" target="_blank" class="text-sm text-blue-600 hover:text-blue-800 truncate max-w-48" title="@link">
													@link
												</a>
											</div>
										}
									}
									catch
									{
										<span class="text-sm text-gray-500">Error loading links</span>
									}
								</div>
							</div>
						}
					</div>
				}
				@if (Model.AcceptedBidId != null)
				{
					<div class="p-4 bg-gray-200 text-center rounded">
						<span class="text-lg font-bold text-red-600">Project Closed</span>
					</div>
				}
				else
				{
					<a asp-controller="Freelancer" asp-action="Bid" asp-route-id="@Model.Id" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Add Bidding</a>
				}
			</div>
		</div>
	</div>
</div>

<!-- Image Modal -->
<div id="imageModal" class="fixed inset-0 flex items-center justify-center z-50 hidden" style="background-color: rgba(0, 0, 0, 0.5); backdrop-filter: blur(8px); -webkit-backdrop-filter: blur(8px);">
	<div class="bg-white rounded-lg shadow-xl max-w-xl w-full max-h-full">
		<div class="relative p-8">
			<button type="button" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 rounded-full p-2 hover:bg-gray-100 transition-colors duration-200" onclick="closeImageModal()">
				<svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
			<div class="text-center">
				<img id="modalImage" src="" alt="Project Image" class="max-w-full max-h-[80vh] object-contain mx-auto">
			</div>
		</div>
	</div>
</div>

<script>
	function openImageModal(imagePath) {
		document.getElementById('modalImage').src = imagePath;
		document.getElementById('imageModal').classList.remove('hidden');
		document.body.style.overflow = 'hidden';
	}

	function closeImageModal() {
		document.getElementById('imageModal').classList.add('hidden');
		document.body.style.overflow = 'auto';
	}

	// Close modal when clicking outside the image
	document.getElementById('imageModal').addEventListener('click', function(e) {
		if (e.target === this) {
			closeImageModal();
		}
	});

	// Close modal with Escape key
	document.addEventListener('keydown', function(e) {
		if (e.key === 'Escape') {
			closeImageModal();
		}
	});
</script>