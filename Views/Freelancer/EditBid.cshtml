@{
	Layout = "_LayoutFreelancer";
	ViewData["Title"] = "Edit Bid";
}

@model Freelancing.Models.ViewProjectandBidding

<div class="p-4 sm:ml-64">
	<div class="p-4 mt-20">
		<div class="mt-4">
			<div class="block w-full p-6">
				<h2 class="mb-4 text-2xl font-bold text-gray-900">Edit Bidding</h2>
				@if (Model.Project.AcceptedBidId.HasValue)
				{
					<form asp-action="EditBid" method="post" class="p-4 md:p-5">
						<div class="grid gap-4 mb-4 grid-cols-2">
							<div class="col-span-2">
								<h2 class="block mb-2 text-md font-bold text-gray-900">@Model.Project.ProjectName || ₱@Model.Project.Budget</h2>
								<h5 class="mb-2 text-sm font-normal tracking-tight text-gray-900">@Model.Project.ProjectDescription</h5>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="budget" class="block mb-2 text-sm font-medium text-gray-900">Bid Amount</label>
								<div class="relative">
									<span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">₱</span>
									<input type="text" asp-for="Bidding.Budget" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7" readonly>
								</div>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="delivery" class="block mb-2 text-sm font-medium text-gray-900">Delivery Time</label>
								<div class="relative">
									<input type="text" asp-for="Bidding.Delivery" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7"
									placeholder="Proposed days/weeks/months to accomplish"
									readonly>
								</div>
							</div>
							<div class="col-span-2">
								<label for="description" class="block mb-2 text-sm font-medium text-gray-900">Proposal</label>
								<textarea rows="4" asp-for="Bidding.Proposal" class="form-control block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" placeholder="Proposal/Why should the client hire you?" readonly></textarea>
							</div>
						</div>
						<div class="p-4 bg-gray-200 text-center rounded">
							<span class="text-lg font-bold text-red-600">Project Closed</span>
						</div>
					</form>
				}
				else
				{
					<form id="editBidForm" asp-action="EditBid" method="post" enctype="multipart/form-data" class="p-4 md:p-5">
						@if (!string.IsNullOrEmpty(ViewBag.Message as string))
						{
							<div class="mt-2 flex items-center p-4 mb-4 text-sm text-green-800 border border-green-300 rounded-lg bg-green-50" role="alert">
								<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
									<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
								</svg>
								<span class="sr-only">Success</span>
								<div>
									<span class="font-medium">Success!</span> @ViewBag.Message
								</div>
							</div>
						}
						<div class="grid gap-4 mb-4 grid-cols-2">
							<div class="col-span-2">
								<h2 class="block mb-2 text-md font-bold text-gray-900">@Model.Project.ProjectName || ₱@Model.Project.Budget</h2>
								<h5 class="mb-2 text-sm font-normal tracking-tight text-gray-900">@Model.Project.ProjectDescription</h5>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="budget" class="block mb-2 text-sm font-medium text-gray-900">Bid Amount</label>
								<div class="relative">
									<span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">₱</span>
									<input type="text" asp-for="Bidding.Budget" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7" required="">
								</div>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="delivery" class="block mb-2 text-sm font-medium text-gray-900">Delivery Time</label>
								<div class="relative">
									<input type="text" asp-for="Bidding.Delivery" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7"
										   placeholder="Proposed days/weeks/months to accomplish"
										   required="">
								</div>
							</div>
							<div class="col-span-2">
								<label for="description" class="block mb-2 text-sm font-medium text-gray-900">Proposal</label>
								<textarea rows="4" asp-for="Bidding.Proposal" class="form-control block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" placeholder="Proposal/Why should the client hire you?"></textarea>
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="previous-works-files" class="block mb-2 text-sm font-medium text-gray-900">Upload Additional Previous Works</label>
								<div class="flex items-center justify-center w-full h-64 mt-3">
									<label for="previous-works-files" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors duration-200">
										<div class="flex flex-col items-center justify-center pt-5 pb-6" id="previous-works-placeholder">
											<svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
												<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
											</svg>
											<p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
											<p class="text-xs text-gray-500">Images, Documents, Videos, Archives (MAX. 10MB each)</p>
											<p class="text-xs text-gray-500 mt-1">JPG, PNG, GIF, SVG, PDF, DOC, DOCX, TXT, ZIP, MP4, MOV, AVI</p>
										</div>
										<div class="hidden" id="previous-works-progress">
											<div class="w-full max-w-md">
												<div class="mb-4">
													<div class="flex justify-between text-sm text-gray-600 mb-1">
														<span id="previous-works-status">Uploading...</span>
													</div>
													<div class="w-full bg-gray-200 rounded-full h-2">
														<div id="previous-works-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
													</div>
												</div>

											</div>
										</div>
										<input asp-for="Bidding.PreviousWorksFiles" id="previous-works-files" type="file" class="hidden" accept=".jpg,.jpeg,.png,.gif,.svg,.pdf,.doc,.docx,.txt,.zip,.mp4,.mov,.avi" multiple />
										<input type="hidden" id="all-selected-files" name="allSelectedFiles" />
										<input type="hidden" id="removed-files" name="removedFiles" />
									</label>
								</div>
								@if (!ViewData.ModelState.IsValid && ViewData.ModelState["Bidding.PreviousWorksFiles"]?.Errors.Count > 0)
								{
									<div class="mt-2 text-sm text-red-600">
										@ViewData.ModelState["Bidding.PreviousWorksFiles"].Errors.First().ErrorMessage
									</div>
								}
							</div>
							<div class="col-span-2 sm:col-span-1">
								<label for="uploaded-previous-works" class="block mb-2 text-sm font-medium text-gray-900 mt-1">Current Previous Works</label>
								<div id="uploaded-previous-works-container" class="h-64 p-3 bg-gray-50 rounded-lg border border-gray-200 overflow-y-auto">
									<div class="flex items-center justify-center text-gray-500 py-8" id="no-files-message">
										<p>No files uploaded yet.</p>
									</div>
									<div id="previous-works-list" class="space-y-2"></div>
								</div>
							</div>
							<div class="col-span-2">
								<label for="repository-links" class="block mb-2 text-sm font-medium text-gray-900">Repository/Drive Links</label>
								<div class="space-y-2">
									<div class="flex items-center space-x-2">
										<input type="url" id="repository-link-input" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7" placeholder="https://github.com/username/repo or https://drive.google.com/..." />
										<button type="button" id="add-link-btn" class="px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300">
											Add
										</button>
									</div>
									<div id="repository-links-container" class="space-y-2">
										<!-- Links will be added here dynamically -->
									</div>
									<input type="hidden" asp-for="Bidding.RepositoryLinks" id="repository-links-hidden" />
								</div>
							</div>
						</div>
						<button type="submit" name="action" value="save"
								class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
							Save
						</button>
						<button type="button" data-modal-target="deleteBid" data-modal-toggle="deleteBid"
								class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">
							Delete
						</button>
					</form>
					<div id="deleteBid" tabindex="-1" class="modal-overlay hidden fixed top-0 right-0 left-0 z-50 w-full md:inset-0 h-full">
						<div class="modal-backdrop absolute inset-0 bg-opacity-50 bg-opacity-50"></div>
						<div class="relative p-4 w-full max-w-md max-h-full">
							<div class="relative bg-white rounded-lg shadow">

								<button type="button" class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" data-modal-hide="deleteBid">
									<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
										<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
									</svg>
									<span class="sr-only">Close modal</span>
								</button>

								<div class="p-6 text-center">
									<svg class="mx-auto mb-4 text-gray-500 w-12 h-12" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
										<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
									</svg>
									<h3 class="mb-5 text-lg font-normal text-gray-800">Are you sure you want to delete this bid?</h3>

									<button type="button" onclick="deleteBid()" data-modal-hide="confirm-modal"
											class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center me-2">
										Yes, I'm sure
									</button>
									<button type="button" data-modal-hide="deleteBid"
											class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">
										No, cancel
									</button>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add form submission logging
    const form = document.getElementById('editBidForm');
    form.addEventListener('submit', function(e) {
        console.log('Edit bid form submitting...');
        console.log('Total files selected:', allSelectedFiles.files.length);
        console.log('File input files length:', fileInput.files.length);
        console.log('Repository links hidden value:', document.getElementById('repository-links-hidden').value);
        console.log('Files to remove:', removedFiles);
        
        // Set the removed files data
        document.getElementById('removed-files').value = JSON.stringify(removedFiles);
        
        // Log each file name for debugging
        Array.from(allSelectedFiles.files).forEach((file, index) => {
            console.log(`File ${index + 1}:`, file.name);
        });
    });
    const fileInput = document.getElementById('previous-works-files');
    const placeholder = document.getElementById('previous-works-placeholder');
    const progress = document.getElementById('previous-works-progress');
    const progressBar = document.getElementById('previous-works-progress-bar');
    const uploadedContainer = document.getElementById('uploaded-previous-works-container');
    const noFilesMessage = document.getElementById('no-files-message');
    const previousWorksList = document.getElementById('previous-works-list');
    
    // Repository links elements
    const linkInput = document.getElementById('repository-link-input');
    const addLinkBtn = document.getElementById('add-link-btn');
    const linksContainer = document.getElementById('repository-links-container');
    const linksHiddenInput = document.getElementById('repository-links-hidden');
    const repositoryLinks = [];
    const allSelectedFiles = new DataTransfer(); // To store all selected files
    const removedFiles = []; // To track files that should be removed

    // Load existing files if editing
    @if (!string.IsNullOrEmpty(Model.Bidding.PreviousWorksPaths))
    {
        <text>
        try {
            const existingFiles = @Html.Raw(Model.Bidding.PreviousWorksPaths);
            if (existingFiles && existingFiles.length > 0) {
                noFilesMessage.style.display = 'none';
                existingFiles.forEach(filePath => {
                    // For existing files, the filename is now the original name, not extracted from path
                    const fileName = getFileNameFromPath(filePath);
                    addFileToList(filePath, fileName, true); // true indicates existing file, filePath is the full path
                });
            }
        } catch (e) {
            console.error('Error loading existing files:', e);
        }
        </text>
    }

    // Load existing repository links if editing
    @if (!string.IsNullOrEmpty(Model.Bidding.RepositoryLinks))
    {
        <text>
        try {
            const existingLinks = @Html.Raw(Model.Bidding.RepositoryLinks);
            if (existingLinks && existingLinks.length > 0) {
                existingLinks.forEach(link => {
                    addLinkToList(link);
                });
            }
        } catch (e) {
            console.error('Error loading existing links:', e);
        }
        </text>
    }

    function getFileNameFromPath(filePath) {
        return filePath.split('/').pop();
    }

    fileInput.addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        
        if (files.length > 0) {
            placeholder.style.display = 'none';
            progress.style.display = 'block';
            
            let totalFiles = files.length;
            let processedFiles = 0;
            
            files.forEach((file, index) => {
                handleFileSelect(file, index, () => {
                    processedFiles++;
                    const progressPercentage = Math.round((processedFiles / totalFiles) * 100);
                    updateProgress(progressPercentage, `Processing ${processedFiles} of ${totalFiles} files...`);
                    
                    if (processedFiles === totalFiles) {
                        updateProgress(100, 'Upload Complete!');
                        setTimeout(() => {
                            progress.style.display = 'none';
                            placeholder.style.display = 'flex';
                        }, 2000);
                    }
                });
            });
            
            // Update the file input with all selected files
            fileInput.files = allSelectedFiles.files;
            console.log('Files added to DataTransfer. Total files:', allSelectedFiles.files.length);
        }
    });

    function addFileToList(file, fileName, isExistingFile = false) {
        noFilesMessage.style.display = 'none';
        
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between p-2 bg-white rounded border border-gray-300';
        
        const fileInfo = document.createElement('div');
        fileInfo.className = 'flex items-center space-x-2';
        
        const fileIcon = document.createElement('div');
        fileIcon.className = 'w-8 h-8 bg-blue-100 rounded flex items-center justify-center';
        fileIcon.innerHTML = '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>';
        
        const fileNameSpan = document.createElement('span');
        fileNameSpan.className = 'text-sm text-gray-700 truncate';
        fileNameSpan.textContent = fileName;
        
        fileInfo.appendChild(fileIcon);
        fileInfo.appendChild(fileNameSpan);
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'text-red-500 hover:text-red-700';
        removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
        removeBtn.onclick = function() {
            if (isExistingFile) {
                // Track existing file for removal (use the full file path for existing files)
                removedFiles.push(file);
                console.log('File marked for removal:', file);
            } else {
                // Remove file from DataTransfer object only for new files
                const fileIndex = Array.from(allSelectedFiles.files).findIndex(f => f.name === fileName);
                if (fileIndex > -1) {
                    const newDataTransfer = new DataTransfer();
                    Array.from(allSelectedFiles.files).forEach((f, index) => {
                        if (index !== fileIndex) {
                            newDataTransfer.items.add(f);
                        }
                    });
                    allSelectedFiles.items.clear();
                    Array.from(newDataTransfer.files).forEach(f => allSelectedFiles.items.add(f));
                    fileInput.files = allSelectedFiles.files;
                    console.log('File removed from DataTransfer. Remaining files:', allSelectedFiles.files.length);
                }
            }
            
            fileItem.remove();
            if (previousWorksList.children.length === 0) {
                noFilesMessage.style.display = 'flex';
            }
        };
        
        fileItem.appendChild(fileInfo);
        fileItem.appendChild(removeBtn);
        previousWorksList.appendChild(fileItem);
    }

    function updateProgress(percentage, status) {
        progressBar.style.width = `${percentage}%`;
        document.getElementById('previous-works-status').textContent = status;
    }

    function handleFileSelect(file, index, callback) {
        // Validate file size (10MB limit)
        if (file.size > 10 * 1024 * 1024) {
            alert(`File ${file.name} is too large. Maximum size is 10MB.`);
            if (callback) callback();
            return;
        }
        
        // Validate file type
        const allowedTypes = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.pdf', '.doc', '.docx', '.txt', '.zip', '.mp4', '.mov', '.avi'];
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        
        if (!allowedTypes.includes(fileExtension)) {
            alert(`File ${file.name} is not a supported file type.`);
            if (callback) callback();
            return;
        }
        
        // Add file to DataTransfer object
        allSelectedFiles.items.add(file);
        addFileToList(file, file.name);
        
        // Simulate upload progress for this file
        setTimeout(() => {
            if (callback) callback();
        }, 500); // Simulate processing time
    }

    // Repository links functionality
    addLinkBtn.addEventListener('click', function() {
        const link = linkInput.value.trim();
        if (link) {
            if (isValidUrl(link)) {
                addLinkToList(link);
                linkInput.value = '';
            } else {
                alert('Please enter a valid URL');
            }
        }
    });

    linkInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            addLinkBtn.click();
        }
    });

    function addLinkToList(link) {
        if (repositoryLinks.includes(link)) {
            alert('This link has already been added');
            return;
        }

        repositoryLinks.push(link);
        updateHiddenInput();

        const linkItem = document.createElement('div');
        linkItem.className = 'flex items-center justify-between p-2 bg-blue-50 rounded border border-gray-300';
        
        const linkInfo = document.createElement('div');
        linkInfo.className = 'flex items-center space-x-2';
        
        const linkIcon = document.createElement('div');
        linkIcon.className = 'w-6 h-6 bg-blue-100 rounded flex items-center justify-center';
        linkIcon.innerHTML = '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>';
        
        const linkSpan = document.createElement('span');
        linkSpan.className = 'text-sm text-blue-700 truncate';
        linkSpan.textContent = link;
        
        linkInfo.appendChild(linkIcon);
        linkInfo.appendChild(linkSpan);
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'text-red-500 hover:text-red-700 ml-2';
        removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
        removeBtn.onclick = function() {
            const index = repositoryLinks.indexOf(link);
            if (index > -1) {
                repositoryLinks.splice(index, 1);
                updateHiddenInput();
            }
            linkItem.remove();
        };
        
        linkItem.appendChild(linkInfo);
        linkItem.appendChild(removeBtn);
        linksContainer.appendChild(linkItem);
    }

    function updateHiddenInput() {
        linksHiddenInput.value = JSON.stringify(repositoryLinks);
    }

    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }
});

function deleteBid() {
    const form = document.getElementById('editBidForm');
    const actionInput = document.createElement('input');
    actionInput.type = 'hidden';
    actionInput.name = 'action';
    actionInput.value = 'delete';
    form.appendChild(actionInput);
    form.submit();
}
</script>
