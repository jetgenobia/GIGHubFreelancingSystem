@model Freelancing.Models.TerminationSigningViewModel
@{
    Layout = Model.IsClient ? "_LayoutClient" : "_LayoutFreelancer";
    ViewData["Title"] = "Sign Termination - " + Model.ProjectName;
}

<link rel="stylesheet" href="~/css/signature-capture.css" />

<div class="p-4 sm:ml-64">
    <div class="p-4 mt-20">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-4">
                    <a href="@Url.Action("Details", new { id = Model.TerminationId })" class="text-blue-600 hover:text-blue-800">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                    </a>
                    <h1 class="text-3xl font-bold text-gray-900">Sign Termination</h1>
                </div>
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                    @Model.Status
                </span>
            </div>

            <!-- Termination Summary -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">@Model.TerminationTitle</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Project</label>
                        <p class="text-gray-900">@Model.ProjectName</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">@(Model.IsClient ? "Freelancer" : "Client")</label>
                        <p class="text-gray-900">@(Model.IsClient ? Model.FreelancerName : Model.ClientName)</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Final Payment</label>
                        <p class="text-gray-900 font-semibold text-red-600">₱@Model.FinalPayment</p>
                    </div>
                </div>
            </div>

            <!-- Other Party Signature Status -->
            @if (Model.OtherPartyHasSigned)
            {
                <div class="bg-green-50 rounded-lg p-4 mb-6">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <p class="text-green-800">
                            <strong>@(Model.IsClient ? Model.FreelancerName : Model.ClientName)</strong> has already signed this termination on @Model.OtherPartySignedAt.
                        </p>
                    </div>
                </div>
            }

            <!-- Termination Details -->
            <div class="bg-white rounded-lg shadow mb-6">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Termination Details</h2>
                    <p class="text-sm text-gray-600 mt-1">Please review the termination details carefully before signing.</p>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Reason for Termination</label>
                        <p class="text-gray-900 break-words word-wrap-break-word overflow-hidden" style="word-break: break-word; overflow-wrap: break-word; max-width: 100%;">@Model.TerminationReason</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Detailed Explanation</label>
                        <p class="text-gray-900 break-words word-wrap-break-word overflow-hidden" style="word-break: break-word; overflow-wrap: break-word; max-width: 100%;">@Model.TerminationDetails</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Final Payment</label>
                        <p class="text-gray-900 font-semibold text-red-600">₱@Model.FinalPayment</p>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.SettlementNotes))
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Settlement Notes</label>
                            <p class="text-gray-900 break-words word-wrap-break-word overflow-hidden" style="word-break: break-word; overflow-wrap: break-word; max-width: 100%;">@Model.SettlementNotes</p>
                        </div>
                    }
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Requested By</label>
                            <p class="text-gray-900">@Model.RequestedByRole on @Model.RequestedAt.ToString("MMMM dd, yyyy")</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Signing Form -->
            <form asp-action="Sign" method="post" id="terminationSigningForm" class="bg-white rounded-lg shadow p-6">
                <input type="hidden" asp-for="TerminationId" />
                <input type="hidden" asp-for="SignatureData" id="signatureDataField" />
                <input type="hidden" asp-for="SignatureType" id="signatureTypeField" />
                
                <!-- Hidden fields to preserve display data -->
                <input type="hidden" asp-for="TerminationTitle" />
                <input type="hidden" asp-for="ProjectName" />
                <input type="hidden" asp-for="ClientName" />
                <input type="hidden" asp-for="FreelancerName" />
                <input type="hidden" asp-for="TerminationReason" />
                <input type="hidden" asp-for="TerminationDetails" />

                <input type="hidden" asp-for="FinalPayment" />
                <input type="hidden" asp-for="SettlementNotes" />
                <input type="hidden" asp-for="Status" />
                <input type="hidden" asp-for="RequestedAt" />
                <input type="hidden" asp-for="RequestedByRole" />
                <input type="hidden" asp-for="CurrentUserId" />
                <input type="hidden" asp-for="IsClient" />
                <input type="hidden" asp-for="IsFreelancer" />
                <input type="hidden" asp-for="CanSign" />
                <input type="hidden" asp-for="HasAlreadySigned" />
                <input type="hidden" asp-for="OtherPartyHasSigned" />
                <input type="hidden" asp-for="OtherPartySignedAt" />

                <h2 class="text-xl font-semibold text-gray-900 mb-6">Your Digital Signature</h2>

                <!-- Signature Type Tabs -->
                <div class="signature-type-tabs">
                    <button type="button" class="signature-tab active" data-tab="canvas">Draw Signature</button>
                    <button type="button" class="signature-tab" data-tab="type">Type Signature</button>
                </div>

                <!-- Canvas Signature Tab -->
                <div class="signature-tab-content active" id="canvas-tab">
                    <div class="signature-container">
                        <div class="signature-header">
                            <h3 class="signature-title">Draw Your Signature</h3>
                            <div class="signature-controls">
                                <button type="button" id="clearCanvas" class="signature-btn">Clear</button>
                            </div>
                        </div>
                        <div class="signature-canvas-wrapper">
                            <canvas id="signatureCanvas" class="signature-canvas"></canvas>
                            <div class="signature-placeholder" id="signaturePlaceholder">
                                Draw your signature here using mouse or touch
                            </div>
                        </div>
                        <div class="signature-status empty" id="canvasStatus">
                            Please draw your signature above
                        </div>
                    </div>
                </div>

                <!-- Typed Signature Tab -->
                <div class="signature-tab-content" id="type-tab">
                    <div class="signature-container">
                        <h3 class="signature-title">Type Your Signature</h3>
                        <input type="text" id="typedSignatureInput" class="typed-signature-input" placeholder="Type your full name here" maxlength="100" />
                        <div class="typed-signature-preview">
                            <div class="signature-text" id="typedSignaturePreview">Your typed signature will appear here</div>
                        </div>
                        <div class="signature-status empty" id="typedStatus">
                            Please type your full name above
                        </div>
                    </div>
                </div>

                <!-- Agreement Checkboxes -->
                <div class="mt-8 space-y-4">
                    <div class="flex items-start">
                        <input asp-for="AgreeToTerms" type="checkbox" class="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                        <label asp-for="AgreeToTerms" class="ml-3 text-sm text-gray-700">
                            I have read, understood, and agree to the termination terms and conditions specified above.
                        </label>
                    </div>
                    <span asp-validation-for="AgreeToTerms" class="text-red-600 text-sm block ml-7"></span>

                    <div class="flex items-start">
                        <input asp-for="UnderstandLegalImplications" type="checkbox" class="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                        <label asp-for="UnderstandLegalImplications" class="ml-3 text-sm text-gray-700">
                            I understand that this digital signature is legally binding and will terminate the contract once both parties have signed.
                        </label>
                    </div>
                </div>

                <!-- Validation Messages -->
                <div asp-validation-summary="ModelOnly" class="mt-4 text-red-600 text-sm"></div>

                <!-- Actions -->
                <div class="flex items-center justify-between mt-8 p-4 bg-gray-50 rounded-lg">
                    <div class="text-sm text-gray-600">
                        <p class="font-medium">By signing this termination:</p>
                        <ul class="mt-1 list-disc list-inside space-y-1">
                            <li>You agree to terminate the contract</li>
                            <li>The contract will be officially terminated once both parties sign</li>
                            <li>@(Model.OtherPartyHasSigned ? "The contract will be terminated immediately" : "The other party will be notified to sign")</li>
                        </ul>
                    </div>
                    <div class="flex space-x-3">
                        <a href="@Url.Action("Details", new { id = Model.TerminationId })" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Cancel
                        </a>
                        <button type="submit" id="signButton" class="px-6 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:ring-4 focus:ring-red-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            Sign Termination
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="~/js/signature-capture.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize signature capture
    const signatureCapture = new SignatureCapture('signatureCanvas', {
        penColor: '#dc2626',
        penWidth: 2,
        backgroundColor: '#ffffff',
        smoothing: true
    });

    // Form elements
    const form = document.getElementById('terminationSigningForm');
    const signButton = document.getElementById('signButton');
    const signatureDataField = document.getElementById('signatureDataField');
    const signatureTypeField = document.getElementById('signatureTypeField');
    const agreeToTerms = document.querySelector('input[name="AgreeToTerms"]');
    const understandLegal = document.querySelector('input[name="UnderstandLegalImplications"]');
    
    // Signature type tabs
    const signatureTabs = document.querySelectorAll('.signature-tab');
    const signatureTabContents = document.querySelectorAll('.signature-tab-content');
    
    // Canvas elements
    const clearButton = document.getElementById('clearCanvas');
    const canvasStatus = document.getElementById('canvasStatus');
    const signaturePlaceholder = document.getElementById('signaturePlaceholder');
    
    // Typed signature elements
    const typedInput = document.getElementById('typedSignatureInput');
    const typedPreview = document.getElementById('typedSignaturePreview');
    const typedStatus = document.getElementById('typedStatus');
    
    let currentSignatureType = 'canvas';
    let hasValidSignature = false;

    // Tab switching
    signatureTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const tabType = this.dataset.tab;
            
            // Update tab appearance
            signatureTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            // Update tab content
            signatureTabContents.forEach(content => content.classList.remove('active'));
            document.getElementById(tabType + '-tab').classList.add('active');
            
            currentSignatureType = tabType;
            updateSignButton();
        });
    });

    // Canvas signature events
    signatureCapture.canvas.addEventListener('signatureStart', function() {
        signaturePlaceholder.classList.add('hidden');
    });

    signatureCapture.canvas.addEventListener('signatureEnd', function(e) {
        updateCanvasStatus(e.detail.hasSignature);
        updateSignButton();
    });

    clearButton.addEventListener('click', function() {
        signatureCapture.clearCanvas();
        signaturePlaceholder.classList.remove('hidden');
        updateCanvasStatus(false);
        updateSignButton();
    });

    // Typed signature events
    typedInput.addEventListener('input', function() {
        const value = this.value.trim();
        if (value) {
            typedPreview.textContent = value;
            typedStatus.textContent = 'Signature ready';
            typedStatus.className = 'signature-status valid';
        } else {
            typedPreview.textContent = 'Your typed signature will appear here';
            typedStatus.textContent = 'Please type your full name above';
            typedStatus.className = 'signature-status empty';
        }
        updateSignButton();
    });

    // Agreement checkboxes
    [agreeToTerms, understandLegal].forEach(checkbox => {
        checkbox.addEventListener('change', updateSignButton);
    });

    function updateCanvasStatus(hasSignature) {
        if (hasSignature) {
            canvasStatus.textContent = 'Signature captured successfully';
            canvasStatus.className = 'signature-status valid';
            signatureCapture.canvas.classList.add('has-signature');
        } else {
            canvasStatus.textContent = 'Please draw your signature above';
            canvasStatus.className = 'signature-status empty';
            signatureCapture.canvas.classList.remove('has-signature');
        }
    }

    function updateSignButton() {
        let signatureValid = false;
        
        if (currentSignatureType === 'canvas') {
            signatureValid = !signatureCapture.isEmpty();
        } else if (currentSignatureType === 'type') {
            signatureValid = typedInput.value.trim().length >= 2;
        }
        
        const agreementsValid = agreeToTerms.checked && understandLegal.checked;
        
        hasValidSignature = signatureValid;
        signButton.disabled = !(signatureValid && agreementsValid);
    }

    // Form submission
    form.addEventListener('submit', function(e) {
        if (!hasValidSignature) {
            e.preventDefault();
            alert('Please provide a valid signature before submitting.');
            return;
        }

        if (!agreeToTerms.checked || !understandLegal.checked) {
            e.preventDefault();
            alert('Please check all agreement boxes before submitting.');
            return;
        }

        // Set signature data
        if (currentSignatureType === 'canvas') {
            const validation = signatureCapture.validate();
            
            if (!validation.isValid) {
                e.preventDefault();
                alert('Signature validation failed: ' + validation.errors.join(', '));
                return;
            }
            
            signatureDataField.value = signatureCapture.getSignatureBase64();
            signatureTypeField.value = 'Canvas';
        } else if (currentSignatureType === 'type') {
            const typedValue = typedInput.value.trim();
            
            if (typedValue.length < 2) {
                e.preventDefault();
                alert('Please enter your full name for the typed signature.');
                return;
            }
            
            signatureDataField.value = typedValue;
            signatureTypeField.value = 'Text';
        }

        // Show loading state
        signButton.disabled = true;
        signButton.textContent = 'Signing...';
    });
});
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
