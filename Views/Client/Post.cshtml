@{
    Layout = "_LayoutClient";
    ViewData["Title"] = "Post";
}

@model Freelancing.Models.AddProject

<div class="p-4 sm:ml-64">
    <div class="p-4 mt-20">
        <div class="mt-4">
            <div class="block w-full p-6">
                <h2 class="mb-4 text-2xl font-bold text-gray-900">Post a New Project</h2>
                <form asp-action="Post" method="post" enctype="multipart/form-data" class="p-4 md:p-5">
                    @if (!string.IsNullOrEmpty(ViewBag.Message as string))
                    {
                        <div class="mt-2 flex items-center p-4 mb-4 text-sm text-green-800 border border-green-300 rounded-lg bg-green-50" role="alert">
                            <svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                            </svg>
                            <span class="sr-only">Success</span>
                            <div>
                                <span class="font-medium">Success!</span> @ViewBag.Message
                            </div>
                        </div>
                    }

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="mt-2 flex items-center p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50" role="alert">
                            <svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                            </svg>
                            <span class="sr-only">Error</span>
                            <div>
                                <span class="font-medium">Error!</span> Please check the form for errors.
                            </div>
                        </div>
                    }
                    <div class="grid gap-4 mb-4 grid-cols-2">
                        <div class="col-span-2">
                            <label for="name" class="block mb-2 text-sm font-medium text-gray-900">Project Title</label>
                            <input type="text" asp-for="ProjectName" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5" placeholder="Type project title" required="">
                        </div>
                        <div class="col-span-2 sm:col-span-1">
                            <label for="price" class="block mb-2 text-sm font-medium text-gray-900">Budget</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">₱</span>
                                <input type="text" asp-for="Budget"
                                       class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 pl-7"
                                       required="">
                            </div>
                        </div>
                        <div class="col-span-2 sm:col-span-1">
                            <label for="category" class="block mb-2 text-sm font-medium text-gray-900">Category</label>
                            <select asp-for="Category" id="category-select" class="form-control bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5" required="">
                                <option value="">Project category</option>
                                <option value="Websites, IT & Software">Websites, IT & Software</option>
                                <option value="Writing & Content">Writing & Content</option>
                                <option value="Design & Media">Design & Media</option>
                                <option value="Data Entry & Admin">Data Entry & Admin</option>
                                <option value="Translation & Languages">Translation & Languages</option>
                                <option value="Sales & Marketing">Sales & Marketing</option>
                            </select>
                        </div>
                        <div class="col-span-2">
                            <label for="description" class="block mb-2 text-sm font-medium text-gray-900">Project Description</label>
                            <textarea asp-for="ProjectDescription" rows="4" class="form-control block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" required="" placeholder="Write project description here"></textarea>
                        </div>
                        <div class="col-span-2">
                            <label for="requiredskills" class="block mb-2 text-sm font-medium text-gray-900">Required Skills</label>
                            <button type="button" id="add-skills-btn" data-modal-target="skills-modal" data-modal-toggle="skills-modal" class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 disabled:opacity-50 disabled:cursor-not-allowed">
                                Add Skills
                            </button>
                            <div id="selected-skills-display" class="mt-2 min-h-[50px] p-3 bg-gray-50 rounded-lg border border-gray-200">
                                <p class="text-gray-500 text-sm">No skills selected yet.</p>
                            </div>
                        </div>
                        <div class="col-span-2 sm:col-span-1">
                            <label for="dropzone-file" class="block mb-2 text-sm font-medium text-gray-900">Upload Images</label>
                            <div class="flex items-center justify-center w-full h-64 mt-3">
                                <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors duration-200">
                                    <div class="flex flex-col items-center justify-center pt-5 pb-6" id="upload-placeholder">
                                        <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                                        </svg>
                                        <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                                        <p class="text-xs text-gray-500">SVG, PNG, JPG, or GIF (MAX. 10MB each)</p>
                                    </div>
                                    <div class="hidden" id="upload-progress">
                                        <div class="w-full max-w-md">
                                            <div class="mb-4">
                                                <div class="flex justify-between text-sm text-gray-600 mb-1">
                                                    <span id="upload-status">Uploading...</span>
                                                </div>
                                                <div class="w-full bg-gray-200 rounded-full h-2">
                                                    <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                                                </div>
                                            </div>
                                            <div id="file-list" class="space-y-2"></div>
                                        </div>
                                    </div>
                                    <input asp-for="ProjectImages" id="dropzone-file" type="file" class="hidden" accept="image/*" multiple />
                                </label>
                            </div>
                            @if (!ViewData.ModelState.IsValid && ViewData.ModelState["ProjectImages"]?.Errors.Count > 0)
                            {
                                <div class="mt-2 text-sm text-red-600">
                                    @ViewData.ModelState["ProjectImages"].Errors.First().ErrorMessage
                                </div>
                            }
                        </div>
                        <div class="col-span-2 sm:col-span-1">
                            <label for="uploaded-images" class="block mb-2 text-sm font-medium text-gray-900 mt-1">Uploaded Images</label>
                            <div id="uploaded-images-container" class="h-64 p-3 bg-gray-50 rounded-lg border border-gray-200">
                                <div class="flex items-center justify-center text-gray-500 py-8">
                                    <p>No images uploaded yet.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Hidden inputs for selected skill IDs -->
                    <div id="hidden-skill-inputs"></div>

                    <div class="flex justify-end">
                        <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mt-4">
                            Post Project
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Skills Modal -->
<div id="skills-modal" data-modal-backdrop="static" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full backdrop-blur-sm bg-opacity-50">
    <div class="relative p-4 w-full max-w-4xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-sm">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t border-gray-200">
                <h3 class="text-xl font-semibold text-gray-900">
                    Select Required Skills
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" data-modal-hide="skills-modal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-4 md:p-5 space-y-4">
                <!-- Search Form -->
                <form class="max-w-md mx-auto">
                    <label for="skills-search" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                            <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                            </svg>
                        </div>
                        <input type="search" id="skills-search" class="block w-full p-4 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500" placeholder="Search skills..." required />
                        <button type="submit" class="text-white absolute end-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2">Search</button>
                    </div>
                </form>

                <!-- Skills Container -->
                <div id="modal-skills-container" class="max-h-96 overflow-y-auto">
                    <div class="text-center text-gray-500 py-8">
                        <p>Please select a category first to view available skills.</p>
                    </div>
                </div>

                <!-- Selected Skills in Modal -->
                <div class="border-t pt-4">
                    <h4 class="text-lg font-semibold text-gray-900 mb-3">Selected Skills (<span id="modal-selected-count">0</span>)</h4>
                    <div id="modal-selected-skills" class="flex flex-wrap gap-2 min-h-[50px] p-3 bg-gray-50 rounded-lg border border-gray-200">
                        <p class="text-gray-500 text-sm">No skills selected yet.</p>
                    </div>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="flex items-center p-4 md:p-5 border-t border-gray-200 rounded-b">
                <button data-modal-hide="skills-modal" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">Done</button>
                <button type="button" id="clear-skills-btn" class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100">Clear All</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const selectedSkills = new Set();
        const categorySelect = document.getElementById('category-select');
        const addSkillsBtn = document.getElementById('add-skills-btn');
        const modalSkillsContainer = document.getElementById('modal-skills-container');
        const modalSelectedSkills = document.getElementById('modal-selected-skills');
        const modalSelectedCount = document.getElementById('modal-selected-count');
        const skillsSearch = document.getElementById('skills-search');
        const clearSkillsBtn = document.getElementById('clear-skills-btn');
        const selectedSkillsDisplay = document.getElementById('selected-skills-display');
        const hiddenSkillInputs = document.getElementById('hidden-skill-inputs');

        // Image upload functionality
        const fileInput = document.getElementById('dropzone-file');
        const uploadPlaceholder = document.getElementById('upload-placeholder');
        const uploadProgress = document.getElementById('upload-progress');
        const fileList = document.getElementById('file-list');
        const uploadStatus = document.getElementById('upload-status');
        const progressBar = document.getElementById('progress-bar');
        const uploadedImagesContainer = document.getElementById('uploaded-images-container');

        let uploadedFiles = [];

        // File input change handler
        fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            if (files.length > 0) {
                handleMultipleFileSelect(files);
            }
        });

        // Drag and drop functionality
        const dropzone = document.querySelector('label[for="dropzone-file"]');
        dropzone.addEventListener('dragover', function(e) {
            e.preventDefault();
            dropzone.classList.add('border-blue-500', 'bg-blue-50');
        });

        dropzone.addEventListener('dragleave', function(e) {
            e.preventDefault();
            dropzone.classList.remove('border-blue-500', 'bg-blue-50');
        });

        dropzone.addEventListener('drop', function(e) {
            e.preventDefault();
            dropzone.classList.remove('border-blue-500', 'bg-blue-50');

            const files = Array.from(e.dataTransfer.files);
            if (files.length > 0) {
                handleMultipleFileSelect(files);
            }
        });

        // Handle multiple file selection
        function handleMultipleFileSelect(files) {
            fileList.innerHTML = '';
            
            uploadPlaceholder.classList.add('hidden');
            uploadProgress.classList.remove('hidden');
            
            let totalFiles = files.length;
            let processedFiles = 0;
            
            files.forEach((file, index) => {
                handleFileSelect(file, index, () => {
                    processedFiles++;
                    const progress = Math.round((processedFiles / totalFiles) * 100);
                    updateProgress(progress, `Processing ${processedFiles} of ${totalFiles} files...`);
                    
                    if (processedFiles === totalFiles) {
                        uploadStatus.textContent = 'Upload Complete!';
                        setTimeout(() => {
                            uploadProgress.classList.add('hidden');
                            uploadPlaceholder.classList.remove('hidden');
                        }, 2000);
                    }
                });
            });
        }

        function handleFileSelect(file, index, callback) {
            // Validate file type
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml'];
            if (!allowedTypes.includes(file.type)) {
                alert(`File ${file.name} is not a valid image type. Please select JPG, PNG, GIF, or SVG files.`);
                return;
            }

            // Validate file size (10MB)
            if (file.size > 10 * 1024 * 1024) {
                alert(`File ${file.name} is too large. File size must be less than 10MB.`);
                return;
            }

            // Simulate file processing
            setTimeout(() => {
                uploadedFiles.push({
                    file: file,
                    name: file.name,
                    size: file.size,
                    preview: URL.createObjectURL(file)
                });

                updateUploadedImagesDisplay();
                updateFileInput();
                callback();
            }, 1000);
        }

        function updateFileInput() {
            // Create a DataTransfer object to hold all files
            const dataTransfer = new DataTransfer();

            // Add all uploaded files to the DataTransfer
            uploadedFiles.forEach(fileData => {
                dataTransfer.items.add(fileData.file);
            });

            // Update the file input with all files
            fileInput.files = dataTransfer.files;
        }

        function updateProgress(percentage, status) {
            progressBar.style.width = `${percentage}%`;
            uploadStatus.textContent = status;
        }



        function updateUploadedImagesDisplay() {
            if (uploadedFiles.length === 0) {
                uploadedImagesContainer.innerHTML = `
                    <div class="text-center text-gray-500 py-8">
                        <p>No images uploaded yet.</p>
                    </div>
                `;
                return;
            }

            const imagesHtml = uploadedFiles.map((fileData, index) => `
                <div class="relative inline-block m-2">
                    <img src="${fileData.preview}" alt="${fileData.name}"
                         class="w-24 h-24 object-cover rounded-lg border border-gray-200 cursor-pointer hover:opacity-75 transition-opacity duration-200"
                         onclick="previewImage('${fileData.preview}', '${fileData.name}')">
                    <button type="button" class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors duration-200"
                            onclick="removeUploadedFile(${index})">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `).join('');

            uploadedImagesContainer.innerHTML = `
                <div class="flex flex-wrap gap-2">
                    ${imagesHtml}
                </div>
            `;
        }



        // Remove uploaded file
        window.removeUploadedFile = function(index) {
            uploadedFiles.splice(index, 1);
            updateUploadedImagesDisplay();
            updateFileInput();
        };

                 // Preview image in modal
         window.previewImage = function(imageSrc, imageName) {
             const previewModal = document.createElement('div');
             previewModal.className = 'fixed inset-0 flex items-center justify-center z-50';
             previewModal.id = 'preview-modal-backdrop';
             previewModal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
             previewModal.style.backdropFilter = 'blur(10px)';
             previewModal.style.webkitBackdropFilter = 'blur(10px)';

             previewModal.innerHTML = `
                 <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-full">
                     <div class="relative p-6">
                         <button type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-600 rounded-full p-1" onclick="closePreviewModal()">
                             <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                             </svg>
                         </button>
                         <div class="text-center">
                             <h3 class="text-lg font-semibold text-gray-900 mb-4">${imageName}</h3>
                             <img src="${imageSrc}" alt="${imageName}" class="max-w-full max-h-96 object-contain mx-auto">
                         </div>
                     </div>
                 </div>
             `;

             document.body.appendChild(previewModal);

             // Add click event to close modal when clicking backdrop
             previewModal.addEventListener('click', function(event) {
                 if (event.target === previewModal) {
                     closePreviewModal();
                 }
             });

             // Add ESC key to close modal
             document.addEventListener('keydown', function(event) {
                 if (event.key === 'Escape') {
                     closePreviewModal();
                 }
             });
         };

        // Disable add skills button until category is selected
        addSkillsBtn.disabled = true;
        addSkillsBtn.classList.add('opacity-50', 'cursor-not-allowed');

        // Category change handler
        categorySelect.addEventListener('change', function() {
            const selectedCategory = this.value;
            if (selectedCategory) {
                addSkillsBtn.disabled = false;
                addSkillsBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                loadSkillsByCategory(selectedCategory);
            } else {
                addSkillsBtn.disabled = true;
                addSkillsBtn.classList.add('opacity-50', 'cursor-not-allowed');
                modalSkillsContainer.innerHTML = '<div class="text-center text-gray-500 py-8"><p>Please select a category first to view available skills.</p></div>';
            }
        });

        // Load skills by category
        async function loadSkillsByCategory(category) {
            try {
                const response = await fetch(`/Client/GetSkillsByCategory?category=${encodeURIComponent(category)}`);
                const skills = await response.json();
                displaySkills(skills);
            } catch (error) {
                console.error('Error loading skills:', error);
                modalSkillsContainer.innerHTML = '<div class="text-center text-red-500 py-8"><p>Error loading skills. Please try again.</p></div>';
            }
        }

        // Display skills in modal
        function displaySkills(skills) {
            if (skills.length === 0) {
                modalSkillsContainer.innerHTML = '<div class="text-center text-gray-500 py-8"><p>No skills found for this category.</p></div>';
                return;
            }

            const skillsHtml = skills.map(skill => {
                const isSelected = selectedSkills.has(skill.id);
                return `
                    <button type="button"
                            class="skill-btn ${isSelected ? 'bg-blue-600 text-white' : 'bg-white text-gray-900 border border-gray-300'} hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-4 py-2 transition-all duration-200 m-1"
                            data-skill-id="${skill.id}"
                            data-skill-name="${skill.name}">
                        ${skill.name}
                    </button>
                `;
            }).join('');

            modalSkillsContainer.innerHTML = `
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    ${skillsHtml}
                </div>
            `;

            // Add event listeners to skill buttons
            modalSkillsContainer.querySelectorAll('.skill-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const skillId = this.getAttribute('data-skill-id');
                    const skillName = this.getAttribute('data-skill-name');

                    if (selectedSkills.has(skillId)) {
                        selectedSkills.delete(skillId);
                        this.classList.remove('bg-blue-600', 'text-white');
                        this.classList.add('bg-white', 'text-gray-900', 'border', 'border-gray-300');
                    } else {
                        selectedSkills.add(skillId);
                        this.classList.add('bg-blue-600', 'text-white');
                        this.classList.remove('bg-white', 'text-gray-900', 'border', 'border-gray-300');
                    }

                    updateModalSelectedSkills();
                    updateSelectedSkillsDisplay();
                    updateHiddenInputs();
                });
            });
        }

        // Search functionality
        skillsSearch.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            const skillButtons = modalSkillsContainer.querySelectorAll('.skill-btn');

            skillButtons.forEach(btn => {
                const skillName = btn.getAttribute('data-skill-name').toLowerCase();
                if (skillName.includes(searchTerm)) {
                    btn.style.display = 'inline-block';
                } else {
                    btn.style.display = 'none';
                }
            });
        });

        // Clear all skills
        clearSkillsBtn.addEventListener('click', function() {
            selectedSkills.clear();
            updateModalSelectedSkills();
            updateSelectedSkillsDisplay();
            updateHiddenInputs();

            // Reset skill button styles
            modalSkillsContainer.querySelectorAll('.skill-btn').forEach(btn => {
                btn.classList.remove('bg-blue-600', 'text-white');
                btn.classList.add('bg-white', 'text-gray-900', 'border', 'border-gray-300');
            });
        });

        // Update modal selected skills display
        function updateModalSelectedSkills() {
            modalSelectedCount.textContent = selectedSkills.size;

            if (selectedSkills.size === 0) {
                modalSelectedSkills.innerHTML = '<p class="text-gray-500 text-sm">No skills selected yet.</p>';
                return;
            }

            const skillsHtml = Array.from(selectedSkills).map(skillId => {
                const skillButton = modalSkillsContainer.querySelector(`[data-skill-id="${skillId}"]`);
                const skillName = skillButton ? skillButton.getAttribute('data-skill-name') : `Skill ${skillId.substring(0, 8)}...`;

                return `
                    <div class="inline-flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full border border-blue-300">
                        <span class="mr-2">${skillName}</span>
                        <button type="button" class="text-blue-600 hover:text-blue-800 focus:outline-none transition-colors duration-200" onclick="removeSkill('${skillId}')">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                `;
            }).join('');

            modalSelectedSkills.innerHTML = skillsHtml;
        }

        // Update main form selected skills display
        function updateSelectedSkillsDisplay() {
            if (selectedSkills.size === 0) {
                selectedSkillsDisplay.innerHTML = '<p class="text-gray-500 text-sm">No skills selected yet.</p>';
                return;
            }

            const skillsHtml = Array.from(selectedSkills).map(skillId => {
                const skillButton = modalSkillsContainer.querySelector(`[data-skill-id="${skillId}"]`);
                const skillName = skillButton ? skillButton.getAttribute('data-skill-name') : `Skill ${skillId.substring(0, 8)}...`;

                return `
                    <div class="inline-flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full border border-blue-300">
                        <span class="mr-2">${skillName}</span>
                        <button type="button" class="text-blue-600 hover:text-blue-800 focus:outline-none transition-colors duration-200" onclick="removeSkill('${skillId}')">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                `;
            }).join('');

            selectedSkillsDisplay.innerHTML = skillsHtml;
        }

        // Update hidden inputs
        function updateHiddenInputs() {
            hiddenSkillInputs.innerHTML = '';
            selectedSkills.forEach(skillId => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'SelectedSkillIds';
                input.value = skillId;
                hiddenSkillInputs.appendChild(input);
            });
        }

        // Global function for removing skills
        window.removeSkill = function(skillId) {
            selectedSkills.delete(skillId);
            updateModalSelectedSkills();
            updateSelectedSkillsDisplay();
            updateHiddenInputs();

            // Update skill button style
            const skillButton = modalSkillsContainer.querySelector(`[data-skill-id="${skillId}"]`);
            if (skillButton) {
                skillButton.classList.remove('bg-blue-600', 'text-white');
                skillButton.classList.add('bg-white', 'text-gray-900', 'border', 'border-gray-300');
            }
        };

        // Global function for closing preview modal
        window.closePreviewModal = function() {
            const modal = document.querySelector('#preview-modal-backdrop');
            if (modal) {
                document.body.removeChild(modal);
            }
        };
    });
</script>

<script src="~/js/image-upload.js"></script>