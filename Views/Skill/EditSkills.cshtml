@{
	Layout = "_LayoutFreelancer";
	ViewData["Title"] = "Edit Skills";
}

@model Freelancing.Models.EditSkills

<div class="p-4 sm:ml-64">
	<div class="p-4 mt-20">
		<div class="mt-4">
			<div class="block w-full p-6">
				<h2 class="mb-4 text-2xl font-bold text-gray-900">Manage Your Skills</h2>

				
				<!-- Success/Error Messages -->
				@if (TempData["SuccessMessage"] != null)
				{
					<div class="mt-2 flex items-center p-4 mb-4 text-sm text-green-800 border border-green-300 rounded-lg bg-green-50" role="alert">
						<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
							<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
						</svg>
						<span class="sr-only">Success</span>
						<div>
							@TempData["SuccessMessage"]
						</div>
					</div>
				}
				@if (TempData["ErrorMessage"] != null)
				{
					<div class="mt-2 p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50" role="alert">
						<div class="flex items-center mb-2">
							<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
								<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
							</svg>
							<span class="font-medium">Edit failed!</span>
						</div>

						<div>
							@TempData["ErrorMessage"]
						</div>
					</div>
				}

				<!-- Search Form -->
				<form asp-action="EditSkills" method="get" class="max-w-lg mx-auto mb-6" id="searchForm">
					<div class="flex">
						<label for="search-dropdown" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search Skills</label>
						<div class="relative w-full">
							<input type="search" id="search-dropdown" name="searchTerm" value="@Model.SearchTerm"
								   class="block p-2.5 w-full z-20 text-sm text-gray-900 bg-gray-50 rounded-e-lg border-s-gray-50 border-s-2 border border-gray-300 focus:ring-blue-500 focus:border-blue-500"
								   placeholder="Search skills..." />
							<button type="submit" class="absolute top-0 end-0 p-2.5 text-sm font-medium h-full text-white bg-blue-700 rounded-e-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300">
								<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
									<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
								</svg>
								<span class="sr-only">Search</span>
							</button>
						</div>
					</div>
					<!-- Hidden inputs to preserve selected skills during search -->
					<div id="search-hidden-inputs"></div>
				</form>

				<!-- Skills Selection Form -->
				<form asp-action="EditSkills" method="post" class="max-w-4xl mx-auto" id="skillsForm">
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						<!-- Available Skills -->
						<div>
							@foreach (var skill in Model.UserSkills.Take(22))
							{
								<div class="mt-4 inline-flex items-center">
									<button type="button"
											class="skill-btn text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2" @(Model.SelectedSkillIds.Contains(skill.Id) ? "hidden" : "")
											data-skill-id="@skill.Id"
											data-skill-name="@skill.Name">
										@skill.Name
									</button>
								</div>
							}
						</div>

						<!-- Selected Skills -->
						<div>
							<h2 class="mt-6 text-xl font-bold text-gray-900">Selected Skills</h2>
							<div id="selected-skills-container" class="mt-4">
								<!-- Selected skills will be populated here -->
							</div>
						</div>
					</div>

					<!-- Hidden inputs for selected skill IDs -->
					<div id="hidden-inputs"></div>

					<!-- Save Button -->
					<div class="mt-6">
						<button type="submit" class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">
							Save Skills
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const selectedSkills = new Set(@Html.Raw(Json.Serialize(Model.SelectedSkillIds)));
		const selectedSkillsContainer = document.getElementById('selected-skills-container');
		const hiddenInputsContainer = document.getElementById('hidden-inputs');
		const searchHiddenInputsContainer = document.getElementById('search-hidden-inputs');
		const searchForm = document.getElementById('searchForm');

		// Initialize selected skills display
		initializeSelectedSkills();

		// Add event listener to search form to preserve selected skills
		searchForm.addEventListener('submit', function(e) {
			e.preventDefault(); // Prevent default submission
			updateSearchHiddenInputs();
			// Submit the form after updating hidden inputs
			setTimeout(() => {
				searchForm.submit();
			}, 10);
		});

		// Add event listeners to skill buttons
		document.querySelectorAll('.skill-btn').forEach(button => {
			button.addEventListener('click', function() {
				const skillId = this.dataset.skillId;
				const skillName = this.dataset.skillName;

				if (selectedSkills.has(skillId)) {
					removeSkill(skillId);
				} else {
					addSkill(skillId, skillName);
				}

				updateUI();
			});
		});

		function addSkill(skillId, skillName) {
			selectedSkills.add(skillId);
		}

		function removeSkill(skillId) {
			selectedSkills.delete(skillId);
		}

		function updateUI() {
			updateSelectedSkillsDisplay();
			updateHiddenInputs();
			updateAvailableSkillsDisplay();
		}

		function updateSelectedSkillsDisplay() {
			selectedSkillsContainer.innerHTML = '';

			if (selectedSkills.size === 0) {
				selectedSkillsContainer.innerHTML = '<p class="text-gray-500 text-sm">No skills selected yet.</p>';
				return;
			}

			// Get all skill names from the server-side data
			const allSkills = @Html.Raw(Json.Serialize(Model.AllUserSkills.ToDictionary(s => s.Id, s => s.Name)));

			selectedSkills.forEach(skillId => {
				let skillName;

				// First try to get skill name from visible button
				const skillButton = document.querySelector(`[data-skill-id="${skillId}"]`);
				if (skillButton) {
					skillName = skillButton.dataset.skillName;
				} else {
					// If button is not visible (due to search filter), get name from server data
					skillName = allSkills[skillId];
				}

				if (skillName) {
					const skillElement = createSelectedSkillElement(skillId, skillName);
					selectedSkillsContainer.appendChild(skillElement);
				}
			});
		}

		function createSelectedSkillElement(skillId, skillName) {
			const div = document.createElement('div');
			div.className = 'mb-2 flex items-center justify-between bg-white border border-blue-300 rounded-lg px-3 py-2';
			div.innerHTML = `
				<span class="text-sm font-medium text-gray-900">${skillName}</span>
				<button type="button" class="text-red-500 hover:text-red-700 focus:outline-none" onclick="removeSkillFromSelected('${skillId}')">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			`;
			return div;
		}

		function updateHiddenInputs() {
			hiddenInputsContainer.innerHTML = '';
			selectedSkills.forEach(skillId => {
				const input = document.createElement('input');
				input.type = 'hidden';
				input.name = 'SelectedSkillIds';
				input.value = skillId;
				hiddenInputsContainer.appendChild(input);
			});
		}

		function updateSearchHiddenInputs() {
			searchHiddenInputsContainer.innerHTML = '';
			selectedSkills.forEach(skillId => {
				const input = document.createElement('input');
				input.type = 'hidden';
				input.name = 'selectedSkillIds';
				input.value = skillId;
				searchHiddenInputsContainer.appendChild(input);
			});
		}

		function updateAvailableSkillsDisplay() {
			document.querySelectorAll('.skill-btn').forEach(button => {
				const skillId = button.dataset.skillId;
				if (selectedSkills.has(skillId)) {
					button.classList.add('hidden');
				} else {
					button.classList.remove('hidden');
				}
			});
		}

		function initializeSelectedSkills() {
			updateUI();
		}

		// Global function for removing skills (called from dynamically created buttons)
		window.removeSkillFromSelected = function(skillId) {
			removeSkill(skillId);
			updateUI();
		};
	});
</script>