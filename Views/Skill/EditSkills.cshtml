@{
	Layout = "_LayoutFreelancer";
	ViewData["Title"] = "Edit Skills";
}

@model Freelancing.Models.EditSkills

<div class="p-4 sm:ml-64">
	<div class="p-4 mt-20">
		<div class="mt-4">
			<div class="block w-full p-6">
				<h2 class="mb-6 text-3xl font-bold text-gray-900">Manage Your Skills</h2>

				<!-- Success/Error Messages -->
				@if (TempData["SuccessMessage"] != null)
				{
					<div class="mt-2 flex items-center p-4 mb-4 text-sm text-green-800 border border-green-300 rounded-lg bg-green-50" role="alert">
						<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
							<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
						</svg>
						<span class="sr-only">Success</span>
						<div>
							@TempData["SuccessMessage"]
						</div>
					</div>
				}
				@if (TempData["ErrorMessage"] != null)
				{
					<div class="mt-2 p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50" role="alert">
						<div class="flex items-center mb-2">
							<svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
								<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
							</svg>
							<span class="font-medium">Edit failed!</span>
						</div>
						<div>
							@TempData["ErrorMessage"]
						</div>
					</div>
				}

				<!-- Search Form -->
				<div class="max-w-lg mx-auto mb-6">
					<div class="flex">
						<label for="search-input" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search Skills</label>
						<div class="relative w-full">
							<input type="search" id="search-input" name="searchTerm" value="@Model.SearchTerm"
								   class="block p-2.5 w-full z-20 text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500"
								   placeholder="Search skills to find more options..." />
							<button type="button" id="clear-search" class="absolute top-0 end-0 p-2.5 text-sm font-medium h-full text-gray-400 hover:text-gray-600 focus:outline-none" style="display: none;">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
					</div>
				</div>

				<!-- Skills Selection Form -->
				<form asp-action="EditSkills" method="post" class="max-w-6xl mx-auto" id="skillsForm">

					<!-- Available Skills Section -->
					<div class="mb-6">
						<h3 class="text-xl font-bold text-gray-900 mb-4">Available Skills</h3>
						<div id="skills-container" class="flex flex-wrap gap-2">
							@{
								var availableSkills = Model.AllUserSkills.Where(s => !Model.SelectedSkillIds.Contains(s.Id)).ToList();
								var displaySkills = availableSkills.Take(20).ToList();
							}
							@foreach (var skill in displaySkills)
							{
								<button type="button"
										class="skill-btn initial-skill text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-4 py-2 transition-all duration-200"
										data-skill-id="@skill.Id"
										data-skill-name="@skill.Name">
									@skill.Name
								</button>
							}
						</div>



						<div id="no-results" class="text-gray-500 text-center py-8" style="display: none;">
							<svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
							<p>No skills found matching your search.</p>
							<p class="text-sm mt-1">Try different keywords or check your spelling.</p>
						</div>
					</div>

					<!-- Selected Skills Section -->
					<div class="mb-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
						<h3 class="text-xl font-bold text-gray-900 mb-4 flex items-center">
							<svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							Selected Skills (<span id="selected-count">0</span>)
						</h3>
						<div id="selected-skills-container" class="min-h-[50px]">
							<p class="text-gray-500 text-sm">No skills selected yet.</p>
						</div>
					</div>

					<!-- Hidden inputs for selected skill IDs -->
					<div id="hidden-inputs"></div>

					<!-- Save Button -->
					<div class="flex justify-center mt-8">
						<button type="submit" class="text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-8 py-3 transition-colors duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
							</svg>
							Save Skills
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const selectedSkills = new Set(@Html.Raw(Json.Serialize(Model.SelectedSkillIds)));
		const selectedSkillsContainer = document.getElementById('selected-skills-container');
		const hiddenInputsContainer = document.getElementById('hidden-inputs');
		const searchInput = document.getElementById('search-input');
		const clearSearchBtn = document.getElementById('clear-search');
		const selectedCountElement = document.getElementById('selected-count');
		const noResultsDiv = document.getElementById('no-results');
		const skillsContainer = document.getElementById('skills-container');

		// All skills data for searching
		const allSkills = @Html.Raw(Json.Serialize(Model.AllUserSkills.ToDictionary(s => s.Id, s => s.Name)));
		const totalSkillsCount = Object.keys(allSkills).length;
		const selectedSkillsCount = selectedSkills.size;
		const availableSkillsCount = totalSkillsCount - selectedSkillsCount;

		// Track which skills are currently being searched vs initially displayed
		let isSearchActive = false;

		// Initialize
		initializeSelectedSkills();
		updateSelectedCount();

		// Search functionality
		searchInput.addEventListener('input', function() {
			const searchTerm = this.value.toLowerCase().trim();

			if (searchTerm) {
				isSearchActive = true;
				performSearch(searchTerm);
				clearSearchBtn.style.display = 'block';
				if (moreSkillsHint) moreSkillsHint.style.display = 'none';
			} else {
				isSearchActive = false;
				clearSearchBtn.style.display = 'none';
				showInitialSkills();
				noResultsDiv.style.display = 'none';
			}
		});

		// Clear search
		clearSearchBtn.addEventListener('click', function() {
			searchInput.value = '';
			clearSearchBtn.style.display = 'none';
			isSearchActive = false;
			showInitialSkills();
			noResultsDiv.style.display = 'none';
		});

		// Skill button event listeners (delegated for dynamically added buttons)
		skillsContainer.addEventListener('click', function(e) {
			if (e.target.classList.contains('skill-btn')) {
				const skillId = e.target.dataset.skillId;
				const skillName = e.target.dataset.skillName;

				if (selectedSkills.has(skillId)) {
					removeSkill(skillId);
				} else {
					addSkill(skillId, skillName);
				}

				updateUI();
			}
		});

		function showInitialSkills() {
			// Remove any search-added skills
			const searchAddedSkills = skillsContainer.querySelectorAll('.skill-btn:not(.initial-skill)');
			searchAddedSkills.forEach(skill => skill.remove());

			// Show initial skills that aren't selected
			const initialSkills = skillsContainer.querySelectorAll('.initial-skill');
			initialSkills.forEach(skill => {
				const skillId = skill.dataset.skillId;
				if (!selectedSkills.has(skillId)) {
					skill.style.display = 'inline-block';
					skill.classList.remove('hidden');
				} else {
					skill.style.display = 'none';
					skill.classList.add('hidden');
				}
			});
		}

		function performSearch(searchTerm) {
			// Clear the container and rebuild with search results
			skillsContainer.innerHTML = '';
			let visibleCount = 0;

			// Search through all available skills
			Object.keys(allSkills).forEach(skillId => {
				const skillName = allSkills[skillId];
				const isSelected = selectedSkills.has(skillId);
				const matchesSearch = skillName.toLowerCase().includes(searchTerm);

				if (matchesSearch && !isSelected) {
					const skillButton = createSkillButton(skillId, skillName, 'search-result');
					skillsContainer.appendChild(skillButton);
					visibleCount++;
				}
			});

			// Show/hide no results message
			if (visibleCount === 0) {
				noResultsDiv.style.display = 'block';
			} else {
				noResultsDiv.style.display = 'none';
			}
		}

		function createSkillButton(skillId, skillName, className = '') {
			const button = document.createElement('button');
			button.type = 'button';
			button.className = `skill-btn ${className} text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-4 py-2 transition-all duration-200`;
			button.setAttribute('data-skill-id', skillId);
			button.setAttribute('data-skill-name', skillName);
			button.textContent = skillName;
			return button;
		}

		function addSkill(skillId, skillName) {
			selectedSkills.add(skillId);
		}

		function removeSkill(skillId) {
			selectedSkills.delete(skillId);
		}

		function updateUI() {
			updateSelectedSkillsDisplay();
			updateHiddenInputs();
			updateSelectedCount();

			if (isSearchActive) {
				// Re-apply current search filter
				const currentSearch = searchInput.value.toLowerCase().trim();
				performSearch(currentSearch);
			} else {
				showInitialSkills();
			}
		}

		function updateSelectedSkillsDisplay() {
			selectedSkillsContainer.innerHTML = '';

			if (selectedSkills.size === 0) {
				selectedSkillsContainer.innerHTML = '<p class="text-gray-500 text-sm">No skills selected yet.</p>';
				return;
			}

			const skillsGrid = document.createElement('div');
			skillsGrid.className = 'flex flex-wrap gap-2';

			selectedSkills.forEach(skillId => {
				const skillName = allSkills[skillId];
				if (skillName) {
					const skillElement = createSelectedSkillElement(skillId, skillName);
					skillsGrid.appendChild(skillElement);
				}
			});

			selectedSkillsContainer.appendChild(skillsGrid);
		}

		function createSelectedSkillElement(skillId, skillName) {
			const div = document.createElement('div');
			div.className = 'inline-flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full border border-blue-300';
			div.innerHTML = `
				<span class="mr-2">${skillName}</span>
				<button type="button" class="text-blue-600 hover:text-blue-800 focus:outline-none transition-colors duration-200" onclick="removeSkillFromSelected('${skillId}')">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			`;
			return div;
		}

		function updateHiddenInputs() {
			hiddenInputsContainer.innerHTML = '';
			selectedSkills.forEach(skillId => {
				const input = document.createElement('input');
				input.type = 'hidden';
				input.name = 'SelectedSkillIds';
				input.value = skillId;
				hiddenInputsContainer.appendChild(input);
			});
		}

		function updateSelectedCount() {
			selectedCountElement.textContent = selectedSkills.size;
		}

		function initializeSelectedSkills() {
			updateUI();
		}

		// Global function for removing skills
		window.removeSkillFromSelected = function(skillId) {
			removeSkill(skillId);
			updateUI();
		};

		// Initialize search on page load if there's a search term
		if (searchInput.value) {
			isSearchActive = true;
			performSearch(searchInput.value.toLowerCase().trim());
			clearSearchBtn.style.display = 'block';
		}
	});
</script>