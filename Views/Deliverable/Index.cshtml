@{
    Layout = User.IsInRole("Client") ? "_LayoutClient" : "_LayoutFreelancer";
    ViewData["Title"] = "Deliverables";
    var userIsClient = User.IsInRole("Client");
    var userIsFreelancer = User.IsInRole("Freelancer");
}

<div class="p-4 sm:ml-64">
    <div class="p-4 mt-20">
        <div class="mt-4">
            <div class="block w-full p-6">
                <!-- Header -->
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center space-x-4">
                        <a href="javascript:history.back()" class="text-blue-600 hover:text-blue-800">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                            </svg>
                        </a>
                        <h1 class="text-3xl font-bold text-gray-900">Deliverables</h1>
                    </div>
                </div>

                <!-- Success/Error Messages -->
                @if (TempData["Message"] != null)
                {
                    <div class="mt-2 flex items-center p-4 mb-4 text-sm text-green-800 border border-green-300 rounded-lg bg-green-50" role="alert">
                        <svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z" />
                        </svg>
                        <span class="sr-only">Success</span>
                        <div>
                            @TempData["Message"]
                        </div>
                    </div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="mt-2 p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50" role="alert">
                        <div class="flex items-center mb-2">
                            <svg class="shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                            </svg>
                            <span class="font-medium">Submission failed!</span>
                        </div>
                        <div>@TempData["ErrorMessage"]</div>
                    </div>
                }

                <!-- Submit Deliverable Form (Freelancers Only) -->
                @if (ViewBag.IsFreelancer)
                {
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Submit Deliverable</h2>
                    <form asp-action="Submit" method="post" enctype="multipart/form-data" class="space-y-6">
                        <input type="hidden" name="ContractId" value="@ViewBag.ContractId" />

                        <div>
                            <label for="title" class="block mb-2 text-sm font-medium text-gray-900">Title</label>
                            <input type="text" name="Title" id="title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="submitted-files" class="block mb-2 text-sm font-medium text-gray-900">Upload Files</label>
                                <div class="flex items-center justify-center w-full h-32">
                                    <label for="submitted-files" class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors duration-200">
                                        <div class="flex flex-col items-center justify-center pt-5 pb-6" id="files-placeholder">
                                            <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                                            </svg>
                                            <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                                            <p class="text-xs text-gray-500">MAX. 10MB each</p>
                                        </div>
                                        <input name="SubmittedFiles" id="submitted-files" type="file" class="hidden" accept=".jpg,.jpeg,.png,.gif,.svg,.pdf,.doc,.docx,.txt,.zip,.mp4,.mov,.avi" multiple />
                                        <input type="hidden" id="all-selected-files" name="AllSelectedFiles" />
                                    </label>
                                </div>
                            </div>

                            <div>
                                <label for="uploaded-files" class="block mb-2 text-sm font-medium text-gray-900">Selected Files</label>
                                <div id="uploaded-files-container" class="h-32 p-3 bg-gray-50 rounded-lg border border-gray-200 overflow-y-auto">
                                    <div class="flex items-center justify-center text-gray-500 py-8" id="no-files-message">
                                        <p>No files selected.</p>
                                    </div>
                                    <div id="files-list" class="space-y-2"></div>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label for="repository-links" class="block mb-2 text-sm font-medium text-gray-900">Repository/Drive Links</label>
                            <div class="space-y-2">
                                <div class="flex items-center space-x-2">
                                    <input type="url" id="repository-link-input" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="https://github.com/username/repo or https://drive.google.com/..." />
                                    <button type="button" id="add-link-btn" class="px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300">
                                        Add
                                    </button>
                                </div>
                                <div id="repository-links-container" class="space-y-2">
                                    <!-- Links will be added here dynamically -->
                                </div>
                                <input type="hidden" name="RepositoryLinks" id="repository-links-hidden" />
                            </div>
                        </div>

                        <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                            Submit Deliverable
                        </button>
                    </form>
                }

                @if (ViewBag.IsFreelancer)
                {
                    <!-- Existing Deliverables Freelancer -->
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 mt-6">Submitted Deliverables</h2>
                    @if (ViewBag.Deliverables != null && ((List<Freelancing.Models.Entities.Deliverable>)ViewBag.Deliverables).Count > 0)
                    {
                        <div class="space-y-4">
                            @foreach (var deliverable in (List<Freelancing.Models.Entities.Deliverable>)ViewBag.Deliverables)
                            {
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-2">
                                        <h3 class="text-lg font-medium text-gray-900">@deliverable.Title</h3>
                                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium
                                                        @(deliverable.Status == "Approved" ? "bg-green-100 text-green-800" : deliverable.Status == "For Revision" ? "bg-orange-100 text-orange-800" : "bg-yellow-100 text-yellow-800")">
                                            @deliverable.Status
                                        </span>
                                    </div>
                                    <div class="text-sm text-gray-500 mb-4">
                                        Submitted on @deliverable.SubmittedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                    </div>

                                    @if (!string.IsNullOrEmpty(deliverable.SubmittedFilesPaths))
                                    {
                                        <div class="mb-2">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Files:</p>
                                            <div class="flex flex-wrap gap-2">
                                                @{
                                                    var files = System.Text.Json.JsonSerializer.Deserialize<List<string>>(deliverable.SubmittedFilesPaths);
                                                    foreach (var file in files)
                                                    {
                                                        <a href="@file" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm rounded bg-blue-50 shadow-sm p-2">
                                                            <div class="inline-flex items-center justify-center">
                                                                <svg class="w-[15px] h-[15px] text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                                                    <path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd" />
                                                                </svg>
                                                                <span class="ms-1">@System.IO.Path.GetFileName(file)</span>
                                                            </div>
                                                        </a>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(deliverable.RepositoryLinks))
                                    {
                                        <div class="mb-2">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Links:</p>
                                            <div class="flex flex-wrap gap-2">
                                                @{
                                                    var links = System.Text.Json.JsonSerializer.Deserialize<List<string>>(deliverable.RepositoryLinks);
                                                    foreach (var link in links)
                                                    {
                                                        <a href="@link" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm">
                                                            @link
                                                        </a>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(deliverable.ReviewComments))
                                    {
                                        <div class="mt-2 p-3 bg-gray-50 rounded">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Review Comments:</p>
                                            <p class="text-sm text-gray-600">@deliverable.ReviewComments</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No deliverables submitted yet</h3>
                            <p class="mt-1 text-sm text-gray-500">
                                @if (ViewBag.IsFreelancer)
                                {
                                    <span>Submit your first deliverable using the form above.</span>
                                }
                                else
                                {
                                    <span>Deliverables will appear here once submitted by the freelancer.</span>
                                }
                            </p>
                        </div>
                    }
                }
                else if (ViewBag.IsClient)
                {
                    <!-- Existing Deliverables Client -->
                    <h2 class="text-xl font-semibold text-gray-900 mb-4 mt-6">Submitted Deliverables</h2>
                    @if (ViewBag.Deliverables != null && ((List<Freelancing.Models.Entities.Deliverable>)ViewBag.Deliverables).Count > 0)
                    {
                        <div class="space-y-4">
                            @foreach (var deliverable in (List<Freelancing.Models.Entities.Deliverable>)ViewBag.Deliverables)
                            {
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-2">
                                        <h3 class="text-lg font-medium text-gray-900">@deliverable.Title</h3>
                                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium
                                                        @(deliverable.Status == "Approved" ? "bg-green-100 text-green-800" : deliverable.Status == "For Revision" ? "bg-orange-100 text-orange-800" : "bg-yellow-100 text-yellow-800")">
                                            @deliverable.Status
                                        </span>
                                    </div>
                                    <div class="text-sm text-gray-500 mb-4">
                                        Submitted on @deliverable.SubmittedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                    </div>

                                    @if (!string.IsNullOrEmpty(deliverable.SubmittedFilesPaths))
                                    {
                                        <div class="mb-2">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Files:</p>
                                            <div class="flex flex-wrap gap-2">
                                                @{
                                                    var files = System.Text.Json.JsonSerializer.Deserialize<List<string>>(deliverable.SubmittedFilesPaths);
                                                    foreach (var file in files)
                                                    {
                                                        <a href="@file" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm rounded bg-blue-50 shadow-sm p-2">
                                                            <div class="inline-flex items-center justify-center">
                                                                <svg class="w-[15px] h-[15px] text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                                                    <path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd" />
                                                                </svg>
                                                                <span class="ms-1">@System.IO.Path.GetFileName(file)</span>
                                                            </div>
                                                        </a>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(deliverable.RepositoryLinks))
                                    {
                                        <div class="mb-2">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Links:</p>
                                            <div class="flex flex-wrap gap-2">
                                                @{
                                                    var links = System.Text.Json.JsonSerializer.Deserialize<List<string>>(deliverable.RepositoryLinks);
                                                    foreach (var link in links)
                                                    {
                                                        <a href="@link" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm">
                                                            @link
                                                        </a>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(deliverable.ReviewComments))
                                    {
                                        <div class="mt-2 p-3 bg-gray-50 rounded">
                                            <p class="text-sm font-medium text-gray-700 mb-1">Review Comments:</p>
                                            <p class="text-sm text-gray-600">@deliverable.ReviewComments</p>
                                        </div>
                                    }

                                                                         @if (deliverable.Status == "Submitted")
                                     {
                                         <div class="mt-4 flex gap-1">
                                             <button type="button"
                                                     onclick="openAcceptModal('@deliverable.Id', '@deliverable.Title')"
                                                     class="focus:outline-none text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">
                                                 Approve
                                             </button>
                                             <button type="button"
                                                     onclick="openRevisionModal('@deliverable.Id', '@deliverable.Title')"
                                                     class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">
                                                 Request Revision
                                             </button>
                                         </div>
                                     }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No deliverables submitted yet</h3>
                            <p class="mt-1 text-sm text-gray-500">
                                @if (ViewBag.IsFreelancer)
                                {
                                    <span>Submit your first deliverable using the form above.</span>
                                }
                                else
                                {
                                    <span>Deliverables will appear here once submitted by the freelancer.</span>
                                }
                            </p>
                        </div>
                    }
                }
                
            </div>
        </div>
    </div>
</div>

 <!-- Revision Modal -->
 <div id="revisionModal" class="fixed inset-0 backdrop-blur-sm bg-black/20 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900">Request Revision</h3>
                <button onclick="closeRevisionModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div class="mb-4">
                <p class="text-sm text-gray-600 mb-2">Deliverable: <span id="deliverableTitle" class="font-medium text-gray-900"></span></p>
                <label for="revisionComments" class="block text-sm font-medium text-gray-700 mb-2">Revision Comments</label>
                
                <textarea id="revisionComments" rows="4" class="w-full px-3 py-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-md focus:ring-2 focus:ring-orange-500 focus:border-orange-500" placeholder="Please provide detailed feedback on what needs to be revised..."></textarea>
            </div>

            <div class="flex justify-end space-x-3">
                <button onclick="closeRevisionModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500">
                    Cancel
                </button>
                <button onclick="submitRevision()" class="px-4 py-2 text-sm font-medium text-white bg-orange-600 rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500">
                    Request Revision
                </button>
            </div>
        </div>
    </div>
 </div>
 
 <!-- Accept Modal -->
 <div id="acceptModal" tabindex="-1" class="hidden fixed inset-0 z-50 overflow-y-auto overflow-x-hidden">
     <div class="modal-backdrop absolute inset-0 backdrop-blur-md bg-black/20"></div>
     <div class="flex items-center justify-center min-h-screen p-4">
         <div class="relative w-full max-w-md">
         <div class="relative bg-white rounded-lg shadow">
             <button type="button" class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" onclick="closeAcceptModal()">
                 <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                     <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                 </svg>
                 <span class="sr-only">Close modal</span>
             </button>
 
             <div class="p-6 text-center">
                 <svg class="mx-auto mb-4 text-gray-500 w-12 h-12" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                     <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                 </svg>
                 <h3 class="mb-5 text-lg font-normal text-gray-800">Are you sure you want to approve the deliverable "<span id="acceptDeliverableTitle"></span>"?</h3>
 
                 <button type="button"
                         onclick="submitAccept()"
                         class="text-white bg-green-600 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center me-2">
                     Yes, I'm sure
                 </button>
                 <button type="button"
                         onclick="closeAcceptModal()"
                         class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">
                     No, cancel
                 </button>
             </div>
         </div>
     </div>
 </div>
 
 <input type="hidden" id="deliverableIdInput" />
 <input type="hidden" id="acceptDeliverableIdInput" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const fileInput = document.getElementById('submitted-files');
        const placeholder = document.getElementById('files-placeholder');
        const uploadedContainer = document.getElementById('uploaded-files-container');
        const noFilesMessage = document.getElementById('no-files-message');
        const filesList = document.getElementById('files-list');
        const allSelectedFiles = new DataTransfer();

        // Repository links elements
        const linkInput = document.getElementById('repository-link-input');
        const addLinkBtn = document.getElementById('add-link-btn');
        const linksContainer = document.getElementById('repository-links-container');
        const linksHiddenInput = document.getElementById('repository-links-hidden');
        const repositoryLinks = [];

        fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);

            if (files.length > 0) {
                files.forEach((file, index) => {
                    handleFileSelect(file, index);
                });

                // Update the file input with all selected files
                fileInput.files = allSelectedFiles.files;
            }
        });

        function addFileToList(file, fileName) {
            noFilesMessage.style.display = 'none';

            const fileItem = document.createElement('div');
            fileItem.className = 'flex items-center justify-between p-2 bg-white rounded border border-gray-300';

            const fileInfo = document.createElement('div');
            fileInfo.className = 'flex items-center space-x-2';

            const fileIcon = document.createElement('div');
            fileIcon.className = 'w-8 h-8 bg-blue-100 rounded flex items-center justify-center';
            fileIcon.innerHTML = '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>';

            const fileNameSpan = document.createElement('span');
            fileNameSpan.className = 'text-sm text-gray-700 truncate';
            fileNameSpan.textContent = fileName;

            fileInfo.appendChild(fileIcon);
            fileInfo.appendChild(fileNameSpan);

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'text-red-500 hover:text-red-700';
            removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
            removeBtn.onclick = function() {
                // Remove file from DataTransfer object
                const fileIndex = Array.from(allSelectedFiles.files).findIndex(f => f.name === fileName);
                if (fileIndex > -1) {
                    const newDataTransfer = new DataTransfer();
                    Array.from(allSelectedFiles.files).forEach((f, index) => {
                        if (index !== fileIndex) {
                            newDataTransfer.items.add(f);
                        }
                    });
                    allSelectedFiles.items.clear();
                    Array.from(newDataTransfer.files).forEach(f => allSelectedFiles.items.add(f));
                    fileInput.files = allSelectedFiles.files;
                }

                fileItem.remove();
                if (filesList.children.length === 0) {
                    noFilesMessage.style.display = 'flex';
                }
            };

            fileItem.appendChild(fileInfo);
            fileItem.appendChild(removeBtn);
            filesList.appendChild(fileItem);
        }

        function handleFileSelect(file, index) {
            // Validate file size (10MB limit)
            if (file.size > 10 * 1024 * 1024) {
                alert(`File ${file.name} is too large. Maximum size is 10MB.`);
                return;
            }

            // Validate file type
            const allowedTypes = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.pdf', '.doc', '.docx', '.txt', '.zip', '.mp4', '.mov', '.avi'];
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

            if (!allowedTypes.includes(fileExtension)) {
                alert(`File ${file.name} is not a supported file type.`);
                return;
            }

            // Add file to DataTransfer object
            allSelectedFiles.items.add(file);
            addFileToList(file, file.name);
        }

        // Repository links functionality
        addLinkBtn.addEventListener('click', function() {
            const link = linkInput.value.trim();
            if (link) {
                if (isValidUrl(link)) {
                    addLinkToList(link);
                    linkInput.value = '';
                } else {
                    alert('Please enter a valid URL');
                }
            }
        });

        linkInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                addLinkBtn.click();
            }
        });

        function addLinkToList(link) {
            if (repositoryLinks.includes(link)) {
                alert('This link has already been added');
                return;
            }

            repositoryLinks.push(link);
            updateHiddenInput();

            const linkItem = document.createElement('div');
            linkItem.className = 'flex items-center justify-between p-2 bg-blue-50 rounded border border-gray-300';

            const linkInfo = document.createElement('div');
            linkInfo.className = 'flex items-center space-x-2';

            const linkIcon = document.createElement('div');
            linkIcon.className = 'w-6 h-6 bg-blue-100 rounded flex items-center justify-center';
            linkIcon.innerHTML = '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>';

            const linkSpan = document.createElement('span');
            linkSpan.className = 'text-sm text-blue-700 truncate';
            linkSpan.textContent = link;

            linkInfo.appendChild(linkIcon);
            linkInfo.appendChild(linkSpan);

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'text-red-500 hover:text-red-700 ml-2';
            removeBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
            removeBtn.onclick = function() {
                const index = repositoryLinks.indexOf(link);
                if (index > -1) {
                    repositoryLinks.splice(index, 1);
                    updateHiddenInput();
                }
                linkItem.remove();
            };

            linkItem.appendChild(linkInfo);
            linkItem.appendChild(removeBtn);
            linksContainer.appendChild(linkItem);
        }

        function updateHiddenInput() {
            linksHiddenInput.value = JSON.stringify(repositoryLinks);
        }

                 function isValidUrl(string) {
             try {
                 new URL(string);
                 return true;
             } catch (_) {
                 return false;
             }
         }
     });

     // Revision modal functionality - Global functions
     function openRevisionModal(deliverableId, deliverableTitle) {
         document.getElementById('revisionModal').style.display = 'block';
         document.getElementById('deliverableIdInput').value = deliverableId;
         document.getElementById('deliverableTitle').textContent = deliverableTitle;
     }

     function closeRevisionModal() {
         document.getElementById('revisionModal').style.display = 'none';
         document.getElementById('revisionComments').value = '';
     }

           function submitRevision() {
          const deliverableId = document.getElementById('deliverableIdInput').value;
          const reviewComments = document.getElementById('revisionComments').value.trim();
          
          if (!reviewComments) {
              alert('Please provide revision comments.');
              return;
          }

          const form = document.createElement('form');
          form.method = 'POST';
          form.action = '/Deliverable/RequestRevision';

          const deliverableIdInput = document.createElement('input');
          deliverableIdInput.type = 'hidden';
          deliverableIdInput.name = 'deliverableId';
          deliverableIdInput.value = deliverableId;

          const reviewCommentsInput = document.createElement('input');
          reviewCommentsInput.type = 'hidden';
          reviewCommentsInput.name = 'reviewComments';
          reviewCommentsInput.value = reviewComments;

          form.appendChild(deliverableIdInput);
          form.appendChild(reviewCommentsInput);
          document.body.appendChild(form);
          form.submit();
      }

      // Accept modal functionality - Global functions
      function openAcceptModal(deliverableId, deliverableTitle) {
          document.getElementById('acceptModal').style.display = 'block';
          document.getElementById('acceptDeliverableIdInput').value = deliverableId;
          document.getElementById('acceptDeliverableTitle').textContent = deliverableTitle;
      }

      function closeAcceptModal() {
          document.getElementById('acceptModal').style.display = 'none';
      }

      function submitAccept() {
          const deliverableId = document.getElementById('acceptDeliverableIdInput').value;

          const form = document.createElement('form');
          form.method = 'POST';
          form.action = '/Deliverable/Approve';

          const deliverableIdInput = document.createElement('input');
          deliverableIdInput.type = 'hidden';
          deliverableIdInput.name = 'deliverableId';
          deliverableIdInput.value = deliverableId;

          form.appendChild(deliverableIdInput);
          document.body.appendChild(form);
          form.submit();
      }
 </script>
